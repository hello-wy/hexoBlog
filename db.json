{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/alipay.png","path":"img/alipay.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/logo.ico","path":"img/logo.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"14e65d54c11d48e112909e2e640f407eedec09b0","modified":1661422449723},{"_id":"source/link/index.md","hash":"06a799c520f6b6d85d5f21c58fc39c17821e95f8","modified":1661422477961},{"_id":"source/_data/link.yml","hash":"ebc67a9ebd85a5ff582df342e550cf21cabecde5","modified":1656751001370},{"_id":"source/_posts/hello-world.md","hash":"5223482a068d290840ca194b372591c2c7b14749","modified":1656751001424},{"_id":"source/_posts/testPost.md","hash":"ff549079db28438983a00d12e88b6a7024adb61a","modified":1656751001453},{"_id":"source/tags/index.md","hash":"334447a4c4e77dd9552430ec86a10cd4585452b3","modified":1656751001478},{"_id":"source/_posts/gmall文档/JSR303校验.md","hash":"0c04d4ec37f7f87f268c8d149501daaf18d55c12","modified":1656751026230},{"_id":"source/_posts/gmall文档/三级菜单.md","hash":"d1a0a338af5ac5bc8ba3ad22187e2066086d4998","modified":1656751026264},{"_id":"source/_posts/gmall文档/使用mybatis进行分页查询.md","hash":"4cbb05cfa02aee87b95c5068328cc2658f8e48d9","modified":1656751026282},{"_id":"source/_posts/gmall文档/mybatis-plus 逻辑删除.md","hash":"80a5cfb1d6a0b4f9494b05f62298146d189ee0d2","modified":1656055465446},{"_id":"source/_posts/gmall文档/前端功能总结(2).md","hash":"3b85f2262c0825ec2194d49e73f991b03697f48a","modified":1656751026296},{"_id":"source/_posts/gmall文档/前端功能总结.md","hash":"ad1ee50695af877ab2144886005cebce238d773b","modified":1656751026319},{"_id":"source/_posts/gmall文档/接口和抽象类使用的好处.md","hash":"5969679911362d334191e908cfca65b2381bf18a","modified":1656751026337},{"_id":"source/_posts/gmall文档/文件上传.md","hash":"e8c4087f318882504e658b9e1ea00c6b22d7457a","modified":1656751026363},{"_id":"source/_posts/gmall文档/网关解决跨域.md","hash":"7aaf5a5547759d8e7e9226878e674b9a4d5e9b73","modified":1656751026405},{"_id":"source/_posts/gmall文档/注解使用，空不返回.md","hash":"2a3f8d8106179f8c4b5616619e463ec33c74fd5d","modified":1656751026387},{"_id":"source/_posts/git/常用git命令.md","hash":"04796b9b62e5d612dafbc5e975028d508b981877","modified":1656751026209},{"_id":"source/_posts/springCloud/springCloud认证中心搭建.md","hash":"c6ec88734df4e41c6a90649228ba7cc98e3df0ad","modified":1656751026421},{"_id":"source/_posts/个人网站/从0开始搭建自己的网站-一.md","hash":"6fba536b321fbf0b5c3453001c98a8d888372e0d","modified":1656751026435},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"66b4889591d0f36696c4d363412c753b6fe25519","modified":1655906320705},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1655906320695},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"08afd014fd27019909f341a2ad6162665958c6d6","modified":1655906320704},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"bf1e7d13b179a17f1c851033eddf5944ea5993d4","modified":1655906320704},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"390288cffa0aa1338c02e7f240bafa6eef1d4f4c","modified":1655906320741},{"_id":"node_modules/hexo-theme-butterfly/.github/stale.yml","hash":"5e8ea535424e8112439135d21afc5262c0bc0b39","modified":1655906320743},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"1e37a3695d50e3e61d7c36e58a6dac872a4a56cd","modified":1655906320742},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"d1bb560698eb8b0079495b7b18b44facb610f9fd","modified":1655906320742},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1655906320707},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"28b6f0c39155651d747eb595e0a283bc97be2e09","modified":1655906320743},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1655906320709},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1655906320719},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1655906320715},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1655906320720},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1655906320723},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"67e4f5a66d4b8cabadbaad0410628364ee75e0ae","modified":1655906320741},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1655906320741},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1655906320705},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1655906320742},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1655906320742},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"54511ed299a3bcf4ecbb62e3078f6b0611ccbd2c","modified":1655906320713},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"594a977ebe8d97e60fa3d7cb40fc260ded4d8a58","modified":1655906320706},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1655906320712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1655906320719},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1655906320697},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/config.js","hash":"a12b9f11d7d3f52de5b2090d2805d7303e0187a5","modified":1655906320700},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"b4940a5c73d3a5cd8bb5883e3041ecdd905a74e0","modified":1655906320701},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1655906320703},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1655906320704},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1655906320703},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1655906320703},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1655906320698},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1655906320699},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"b4cd617c619d1a0df93603721a6fa1317526174b","modified":1655906320701},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1655906320703},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"d368a8830e506c8b5eb6512b709ec8db354d5ea1","modified":1655906320703},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1655906320699},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1655906320700},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1655906320700},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1655906320701},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1655906320701},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1655906320701},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1655906320702},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1655906320702},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1655906320703},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1655906320704},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1655906320737},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1655906320696},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":1655906320741},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1655906320721},{"_id":"node_modules/hexo-theme-butterfly/source/img/alipay.png","hash":"fd84bd5c26a7d164ddb6fcc9e9cc993a2b0b3172","modified":1655950796408},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1655906320721},{"_id":"node_modules/hexo-theme-butterfly/source/img/logo.ico","hash":"0bda556f9bd091e0410696a1e7bed66a97f95329","modified":1655976559912},{"_id":"node_modules/hexo-theme-butterfly/source/img/wechat.png","hash":"01411bc9d3808ee3225f1adee37438e6dd7014c3","modified":1655950796371},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1655906320702},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1655906320705},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1655906320704},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"da27c20f0e672103b984e135eb2fe7770ca7fcce","modified":1655906320716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1655906320718},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1655906320706},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1655906320696},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1655906320704},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"8f41fa9732ea654a10f6e666d9c782c7e27e5ea6","modified":1655906320710},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1655906320709},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1655906320712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1655906320717},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1655906320720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1655906320720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1655906320713},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1655906320721},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1655906320717},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1655906320717},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"19a05dccfbffdf31cfa48c3208542b924637303d","modified":1655906320720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1655906320721},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1655906320716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1655906320707},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1655906320709},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"b9ebb02af8ccf43e3f73be43db19254fa913c57b","modified":1655906320720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1655906320717},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1655906320723},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1655906320710},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1655906320711},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1655906320720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1655906320721},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1655906320719},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"460c37caeed6e6e72c1e62292e6c5e9699dd5937","modified":1655906320719},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1655906320720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"bae2f32ac96cebef600c1e37eaa8467c9a7e5d92","modified":1655906320721},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1655906320707},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1655906320711},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1655906320707},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1655906320707},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1655906320707},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1655906320708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1655906320708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1655906320708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1655906320708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1655906320708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1655906320708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1655906320709},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"644d520fe80cc82058467708ab82ccad313b0c27","modified":1655906320735},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1655906320737},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"ca58af8903eb1d1d05edae54fc2e23aeac6da6c5","modified":1655906320727},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1655906320728},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1655906320728},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1655906320735},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":1655906320735},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1655906320738},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1655906320739},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"15056fba0bd5a45ea8dc97eb557f6929ff16797a","modified":1655906320739},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1655906320739},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1655906320739},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1655906320739},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1655906320740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"8314e9749eb1ae40c4bae9735b7a6638b2d6876a","modified":1655906320740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"f67177310f5594954b25a591d186d28d5d450b18","modified":1655906320734},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1655906320739},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1655906320736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1655906320740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1655906320726},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1655906320727},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1655906320728},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1655906320733},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1655906320735},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":1655906320736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1655906320740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1655906320728},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1655906320735},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1655906320736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1655906320736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1655906320737},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1655906320738},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"08493b66b9f31f2bd3e9a3115017a0ce16142b20","modified":1655906320738},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1655906320740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1655906320740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1655906320695},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1655906320709},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1655906320737},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":1655906320738},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1655906320714},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1655906320702},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"51e45625929d57c9df3ba9090af99b9b7bb9a15b","modified":1655906320727},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1655906320711},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1655906320711},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"ce8131b712dca80f289015aef75f86e727f62981","modified":1655906320698},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1655906320724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1655906320713},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"e4b7bf91a29bd03181593b63e1f3ee1103af2e48","modified":1655906320725},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"5f648086a33a32d169a2f8d8c549c08aa02f67db","modified":1655906320725},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1655906320709},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1655906320710},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1655906320710},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1655906320712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1655906320713},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1655906320711},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1655906320724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"693d999777dd16e0566d29ac3203d4c167b2f9a7","modified":1655906320711},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1655906320709},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"2d8fc3fb8f9aec61400acf3c94070bd8539058f8","modified":1655906320711},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1655906320712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"22e2ef30fe5eb1db7566e89943c74ece029b2a8e","modified":1655906320712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"e4850f2c9ba5f6b2248808f7257662679e0fab0a","modified":1655906320713},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1655906320716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"9302837f1e35f153323bb4f166514c7e96e8ecdd","modified":1655906320716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"15462d1ed04651ad3b430c682842ac400f6f9b47","modified":1655906320725},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"81c6070e06ecc2244040c7007566d7972f46ec4e","modified":1655906320724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1655906320725},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1655906320724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1655906320705},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1655906320714},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1655906320706},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1655906320714},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1655906320721},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"31b007dc0f3de52176f278012ecf17a4bcecde2c","modified":1655906320716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"f4dc7d02c8192979404ae9e134c5048d3d0a76e2","modified":1655906320717},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1655906320717},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1655906320710},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1655906320712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1655906320724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1655906320714},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1655906320725},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1655906320706},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"dd0bc119029b62dce5dc965d5de7377e438fa29a","modified":1655906320725},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1655906320737},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1655906320734},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1655906320714},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1655906320735},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1655906320737},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1655906320738},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1655906320717},{"_id":"public/search.xml","hash":"ed21becd9c0e92a11e4f96fff279134aede8ee85","modified":1661422675272},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661422675272},{"_id":"public/link/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661422675272},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661422675272},{"_id":"public/404.html","hash":"480697533f14b48a27d28be6c017d94a2bb5240b","modified":1661422675272},{"_id":"public/2022/06/24/gmall文档/mybatis-plus 逻辑删除/index.html","hash":"8a283318217bc4562c2f31845ae10a69e80d7278","modified":1661422675272},{"_id":"public/2016/01/01/hello-world/index.html","hash":"78d1c7fd4a15e438d1e30a42cb306a96d599c1a8","modified":1661422675272},{"_id":"public/2016/01/01/testPost/index.html","hash":"06be85a0cc275fa2cd5ae60c8cc5d0ce3b74cfa1","modified":1661422675272},{"_id":"public/2016/01/01/gmall文档/JSR303校验/index.html","hash":"852326462c5c0da5d9228e48189680290b53cbfa","modified":1661422675272},{"_id":"public/2016/01/01/gmall文档/三级菜单/index.html","hash":"5172a7f5383b5d74e3b2dd2550f2445c34c65880","modified":1661422675272},{"_id":"public/2016/01/01/gmall文档/使用mybatis进行分页查询/index.html","hash":"f16f3e65993ad4dc58590f5b474b6a078886eec9","modified":1661422675272},{"_id":"public/2016/01/01/gmall文档/前端功能总结(2)/index.html","hash":"a56516df5dab6a5f8a7683d762223d1da750f3de","modified":1661422675272},{"_id":"public/2016/01/01/gmall文档/前端功能总结/index.html","hash":"96e344c84c14e27148578a0ec98f1f0b060ab87a","modified":1661422675272},{"_id":"public/2016/01/01/gmall文档/接口和抽象类使用的好处/index.html","hash":"88b1066259f2531d3ddfe8e3a0aefd277f241359","modified":1661422675272},{"_id":"public/2016/01/01/gmall文档/文件上传/index.html","hash":"4525bed482872c4524bac0b4657475c8fd4c1ec0","modified":1661422675272},{"_id":"public/2016/01/01/gmall文档/注解使用，空不返回/index.html","hash":"74be567005bf86ca92f051608c650a84e70b5a1a","modified":1661422675272},{"_id":"public/2016/01/01/gmall文档/网关解决跨域/index.html","hash":"f4ee08154bd808cb5871e5a3d4ba359dd140c9ae","modified":1661422675272},{"_id":"public/2016/01/01/springCloud/springCloud认证中心搭建/index.html","hash":"3365be704a80cd0a13756ba95a0fddab9523afb7","modified":1661422675272},{"_id":"public/2016/01/01/git/常用git命令/index.html","hash":"abdf260de77bff0929d31bf49f7af1657858280c","modified":1661422675272},{"_id":"public/2016/01/01/个人网站/从0开始搭建自己的网站-一/index.html","hash":"e05004b5cb51fcf1fde01ff35aca3e9c745eb05d","modified":1661422675272},{"_id":"public/archives/index.html","hash":"e3743bd8eac45b64993e0a8395dcea6b2e1a8d3d","modified":1661422675272},{"_id":"public/archives/page/2/index.html","hash":"a4dd6ee3b6a1e42cf1b49c1ecefa82fc0310a7d9","modified":1661422675272},{"_id":"public/archives/2016/index.html","hash":"e38bf938c19cf042c2f6f0493dcf2f26cbff1fb9","modified":1661422675272},{"_id":"public/archives/2016/page/2/index.html","hash":"753b4ab1233a994e9d730b1f5b47879e332bb941","modified":1661422675272},{"_id":"public/archives/2016/01/index.html","hash":"fe57d4b822e775a2f257b7b412ccc0de1a6bf947","modified":1661422675272},{"_id":"public/archives/2016/01/page/2/index.html","hash":"8a8f7a4760d29bad0308ac1894630247a313ce17","modified":1661422675272},{"_id":"public/archives/2022/index.html","hash":"ae664067b5173f2973ad69d5f69704f62f0aea28","modified":1661422675272},{"_id":"public/archives/2022/06/index.html","hash":"c943902775f233e2c5145b00ba8a3c2869f10d69","modified":1661422675272},{"_id":"public/categories/LeetCode破局攻略/index.html","hash":"3bd471ad12c8f0d9e8731a17da5448340e6cd4e4","modified":1661422675272},{"_id":"public/categories/LeetCode破局攻略/page/2/index.html","hash":"ef5fe9d29d5cfc1d8a9e42800fbb19931d42efdd","modified":1661422675272},{"_id":"public/index.html","hash":"50c9c022cd72ed450a5ccf7f96de4bc3a56fa30a","modified":1661422675272},{"_id":"public/page/2/index.html","hash":"209c6faabacdbb8b5e2c7196fb9423837069aff5","modified":1661422675272},{"_id":"public/tags/LeetCode/index.html","hash":"5836d21cf01a9199993764129d136319b327971d","modified":1661422675272},{"_id":"public/tags/LeetCode/page/2/index.html","hash":"6c58f398f89a0a8358bd8daa2adbfc9ed85da254","modified":1661422675272},{"_id":"public/tags/算法/index.html","hash":"4306c7c50d8193faf7fd262fbcb1c0266b95a79c","modified":1661422675272},{"_id":"public/tags/算法/page/2/index.html","hash":"ea87c9dd00575497f59e95c31048d475c2fc977d","modified":1661422675272},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1661422675272},{"_id":"public/img/alipay.png","hash":"fd84bd5c26a7d164ddb6fcc9e9cc993a2b0b3172","modified":1661422675272},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1661422675272},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1661422675272},{"_id":"public/img/logo.ico","hash":"0bda556f9bd091e0410696a1e7bed66a97f95329","modified":1661422675272},{"_id":"public/img/wechat.png","hash":"01411bc9d3808ee3225f1adee37438e6dd7014c3","modified":1661422675272},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661422675272},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1661422675272},{"_id":"public/js/search/algolia.js","hash":"ce8131b712dca80f289015aef75f86e727f62981","modified":1661422675272},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1661422675272},{"_id":"public/css/index.css","hash":"5aff5c3a1fc84d521fab1952a64966f659ea7af2","modified":1661422675272},{"_id":"public/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1661422675272},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1661422675272}],"Category":[{"name":"LeetCode破局攻略","_id":"cl78w5x3t0004b6qfh7w32vh4"}],"Data":[],"Page":[{"title":"index","author":"wuy","tags":["LeetCode","算法"],"categories":["LeetCode破局攻略"],"date":"2016-01-01T11:20:00.000Z","_content":"---\ntitle: 分类\ndate: 2022-06-22 22:43:46\nupdated:\ntype: \"categories\"\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n\n\n\n","source":"categories/index.md","raw":"---\ntitle: index\nauthor: wuy\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n---\ntitle: 分类\ndate: 2022-06-22 22:43:46\nupdated:\ntype: \"categories\"\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n\n\n\n","updated":"2022-08-25T10:14:09.723Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl78w5x3j0000b6qfgj3x65nu","content":"<hr>\n<p>title: 分类<br>date: 2022-06-22 22:43:46<br>updated:<br>type: “categories”<br>comments:<br>description:<br>keywords:<br>top_img:<br>mathjax:<br>katex:<br>aside:<br>aplayer:<br>highlight_shrink:</p>\n<hr>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1655215271909-f894e3dd3f98?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80","excerpt":"","more":"<hr>\n<p>title: 分类<br>date: 2022-06-22 22:43:46<br>updated:<br>type: “categories”<br>comments:<br>description:<br>keywords:<br>top_img:<br>mathjax:<br>katex:<br>aside:<br>aplayer:<br>highlight_shrink:</p>\n<hr>\n"},{"title":"index","author":"远方","tags":["LeetCode","算法"],"categories":null,"date":"2016-01-01T11:20:00.000Z","_content":"---\ntitle: 友情链接\ndate: 2022-06-22 22:43:58\nupdated:\ntype: \"link\"\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n\n\n\n","source":"link/index.md","raw":"title: index\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\ndate: 2016-01-01 19:20:00\n---\n---\ntitle: 友情链接\ndate: 2022-06-22 22:43:58\nupdated:\ntype: \"link\"\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n\n\n\n","updated":"2022-08-25T10:14:37.961Z","path":"link/index.html","comments":1,"layout":"page","_id":"cl78w5x3p0002b6qf02er8kdn","content":"<hr>\n<p>title: 友情链接<br>date: 2022-06-22 22:43:58<br>updated:<br>type: “link”<br>comments:<br>description:<br>keywords:<br>top_img:<br>mathjax:<br>katex:<br>aside:<br>aplayer:<br>highlight_shrink:</p>\n<hr>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8Y29kZXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60","excerpt":"","more":"<hr>\n<p>title: 友情链接<br>date: 2022-06-22 22:43:58<br>updated:<br>type: “link”<br>comments:<br>description:<br>keywords:<br>top_img:<br>mathjax:<br>katex:<br>aside:<br>aplayer:<br>highlight_shrink:</p>\n<hr>\n"},{"title":"index","author":"远方","tags":["LeetCode","算法"],"categories":["LeetCode破局攻略"],"date":"2016-01-01T11:20:00.000Z","_content":"---\ntitle: 标签\ndate: 2022-06-22 22:43:28\nupdated:\ntype: \"tags\"\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n\n\n\n","source":"tags/index.md","raw":"title: index\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n---\ntitle: 标签\ndate: 2022-06-22 22:43:28\nupdated:\ntype: \"tags\"\ncomments:\ndescription:\nkeywords:\ntop_img:\nmathjax:\nkatex:\naside:\naplayer:\nhighlight_shrink:\n---\n\n\n\n","updated":"2022-07-02T08:36:41.478Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl78w5x3v0006b6qfbx580uw0","content":"<hr>\n<p>title: 标签<br>date: 2022-06-22 22:43:28<br>updated:<br>type: “tags”<br>comments:<br>description:<br>keywords:<br>top_img:<br>mathjax:<br>katex:<br>aside:<br>aplayer:<br>highlight_shrink:</p>\n<hr>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1653311918738-0c43e51fb962?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80","excerpt":"","more":"<hr>\n<p>title: 标签<br>date: 2022-06-22 22:43:28<br>updated:<br>type: “tags”<br>comments:<br>description:<br>keywords:<br>top_img:<br>mathjax:<br>katex:<br>aside:<br>aplayer:<br>highlight_shrink:</p>\n<hr>\n"}],"Post":[{"title":"hello-world","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"---\ntitle: Hello World\ncover: https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8Y29kZXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"title: hello-world\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n---\ntitle: Hello World\ncover: https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8Y29kZXxlbnwwfHwwfHw%3D&auto=format&fit=crop&w=500&q=60\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-07-02T08:36:41.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x3m0001b6qfchyy76yi","content":"<hr>\n<p>title: Hello World<br>cover: <a href=\"https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8Y29kZXxlbnwwfHwwfHw=&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60\">https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8Y29kZXxlbnwwfHwwfHw%3D&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60</a></p>\n<hr>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1649133816831-de3d91d25288?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80","excerpt":"","more":"<hr>\n<p>title: Hello World<br>cover: <a href=\"https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8Y29kZXxlbnwwfHwwfHw=&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60\">https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8Y29kZXxlbnwwfHwwfHw%3D&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60</a></p>\n<hr>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"testPost","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"---\ntitle: testPost\ncomments: true\ncopyright: true\ncopyright_author: wuy\ncopyright_author_href: 'https://xxxxxx.com'\ncopyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者\ndate: 2022-06-24 15:18:50\ntags:\n  - 测试\n  - 验证 \ncategories:\nkeywords:\ndescription:\ntop_img:\ncover:\ntoc:\ntoc_number:\ntoc_style_simple:\nkatex:\naplayer:\nhighlight_shrink:\n---\n\n\n\nl\n\n# 测试文章\n\n我也不知道说些什么,反正就是恒开心.\n\n\n\n> 引用块,不知道有没有用\n","source":"_posts/testPost.md","raw":"title: testPost\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n---\ntitle: testPost\ncomments: true\ncopyright: true\ncopyright_author: wuy\ncopyright_author_href: 'https://xxxxxx.com'\ncopyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者\ndate: 2022-06-24 15:18:50\ntags:\n  - 测试\n  - 验证 \ncategories:\nkeywords:\ndescription:\ntop_img:\ncover:\ntoc:\ntoc_number:\ntoc_style_simple:\nkatex:\naplayer:\nhighlight_shrink:\n---\n\n\n\nl\n\n# 测试文章\n\n我也不知道说些什么,反正就是恒开心.\n\n\n\n> 引用块,不知道有没有用\n","slug":"testPost","published":1,"updated":"2022-07-02T08:36:41.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x3p0003b6qfhea7dnhg","content":"<hr>\n<p>title: testPost<br>comments: true<br>copyright: true<br>copyright_author: wuy<br>copyright_author_href: ‘<a href=\"https://xxxxxx.com&/#39;\">https://xxxxxx.com&#39;</a><br>copyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者<br>date: 2022-06-24 15:18:50<br>tags:</p>\n<ul>\n<li>测试</li>\n<li>验证<br>categories:<br>keywords:<br>description:<br>top_img:<br>cover:<br>toc:<br>toc_number:<br>toc_style_simple:<br>katex:<br>aplayer:<br>highlight_shrink:</li>\n</ul>\n<hr>\n<p>l</p>\n<h1 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h1><p>我也不知道说些什么,反正就是恒开心.</p>\n<blockquote>\n<p>引用块,不知道有没有用</p>\n</blockquote>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1571061614252-b045689850f4?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80","excerpt":"","more":"<hr>\n<p>title: testPost<br>comments: true<br>copyright: true<br>copyright_author: wuy<br>copyright_author_href: ‘<a href=\"https://xxxxxx.com&/#39;\">https://xxxxxx.com&#39;</a><br>copyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者<br>date: 2022-06-24 15:18:50<br>tags:</p>\n<ul>\n<li>测试</li>\n<li>验证<br>categories:<br>keywords:<br>description:<br>top_img:<br>cover:<br>toc:<br>toc_number:<br>toc_style_simple:<br>katex:<br>aplayer:<br>highlight_shrink:</li>\n</ul>\n<hr>\n<p>l</p>\n<h1 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h1><p>我也不知道说些什么,反正就是恒开心.</p>\n<blockquote>\n<p>引用块,不知道有没有用</p>\n</blockquote>\n"},{"title":"JSR303校验","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"# 简介\n\n后端开启校验在实体类中使用注解@NotNull、@NotBlank之类的这些类都在javax.validation.constraints包下\n\n访问方法:双击shift进行搜索方法.\n\n\n\n所有的校验注解在validationMessages_zh_cn.peoperties这个是中文注解\n\n\n\n然后在controller对应的entity传参数中添加`@valid`开启校验功能。\n\n# @valid和@validation区别\n\n@valid是一个标准没有分组功能，@validation具有分组功能。\n\n\n\n# 使用步骤\n\n1. 引入springboot-starter-validation包\n2. 给bean字段添加验证注解\n3. 开启校验`@valid`或者`@validated`,开启之后会有一个默认的响应\n4. 通过一个统一的异常处理类进行捕获所有验证异常的异常。使用@controllerAdvice\n5. 分组校验使用`@validated`(必须使用)在controller传参数之前。\n\n\n\n## 统一的异常处理  @controllerAdvice+@exceptHandler\n\n通过抽取异常处理,进行统一的管理.\n\n### 针对特定的错误进行集中处理\n\n```java\n@Slf4j\n@RestControllerAdvice(basePackages = \"com.bigdata.gulimall.product.controller\")\npublic class GulimallExceptionAdvice {\n\n    @ExceptionHandler(value = MethodArgumentNotValidException.class)\n    public R handleValidException(MethodArgumentNotValidException exception){\n        Map<String,String> map=new HashMap<>();\n        BindingResult bindingResult = exception.getBindingResult();\n        bindingResult.getFieldErrors().forEach(fieldError -> {\n            String message = fieldError.getDefaultMessage();\n            String field = fieldError.getField();\n            map.put(field,message);\n        });\n\n        log.error(\"数据校验出现问题{},异常类型{}\",exception.getMessage(),exception.getClass());\n        return R.error(400,\"数据校验出现问题\").put(\"data\",map);\n    }\n\n}\n\n```\n\n上面的代码,通过exceptionhandler设置value值进行对参数格式不合法，进行统一的管理.\n\n### 默认统一处理异常(未知的)\n\n```java\n   @ExceptionHandler(value = Throwable.class)\n    public R handleException(Throwable throwable){\n        log.error(\"未知异常{},异常类型{}\",throwable.getMessage(),throwable.getClass());\n        return R.error(BizCodeEnum.UNKNOW_EXEPTION.getCode(),BizCodeEnum.UNKNOW_EXEPTION.getMsg());\n    }\n```\n\n直接截断throwable异常，\n\n## 系统错误码（枚举类）\n\n使用统一的管理错误码的类。对错误码以及错误提示进行统一的管理。\n\n```java\npublic enum BizCodeEnum {\n\n   \n    UNKNOW_EXEPTION(10000,\"系统未知异常\"),\n\n    VALID_EXCEPTION( 10001,\"参数格式校验失败\");\n\n    private int code;\n    private String msg;\n\n    BizCodeEnum(int code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n}\n```\n\n\n\n# 分组校验(可以使用多个VO进行代替解决)\n\n不同的场景使用不同的校验，比如说添加时，和插入时这个是不同的。\n\n使用groups\n\n使用@valid\n\n\n","source":"_posts/gmall文档/JSR303校验.md","raw":"title: JSR303校验\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n# 简介\n\n后端开启校验在实体类中使用注解@NotNull、@NotBlank之类的这些类都在javax.validation.constraints包下\n\n访问方法:双击shift进行搜索方法.\n\n\n\n所有的校验注解在validationMessages_zh_cn.peoperties这个是中文注解\n\n\n\n然后在controller对应的entity传参数中添加`@valid`开启校验功能。\n\n# @valid和@validation区别\n\n@valid是一个标准没有分组功能，@validation具有分组功能。\n\n\n\n# 使用步骤\n\n1. 引入springboot-starter-validation包\n2. 给bean字段添加验证注解\n3. 开启校验`@valid`或者`@validated`,开启之后会有一个默认的响应\n4. 通过一个统一的异常处理类进行捕获所有验证异常的异常。使用@controllerAdvice\n5. 分组校验使用`@validated`(必须使用)在controller传参数之前。\n\n\n\n## 统一的异常处理  @controllerAdvice+@exceptHandler\n\n通过抽取异常处理,进行统一的管理.\n\n### 针对特定的错误进行集中处理\n\n```java\n@Slf4j\n@RestControllerAdvice(basePackages = \"com.bigdata.gulimall.product.controller\")\npublic class GulimallExceptionAdvice {\n\n    @ExceptionHandler(value = MethodArgumentNotValidException.class)\n    public R handleValidException(MethodArgumentNotValidException exception){\n        Map<String,String> map=new HashMap<>();\n        BindingResult bindingResult = exception.getBindingResult();\n        bindingResult.getFieldErrors().forEach(fieldError -> {\n            String message = fieldError.getDefaultMessage();\n            String field = fieldError.getField();\n            map.put(field,message);\n        });\n\n        log.error(\"数据校验出现问题{},异常类型{}\",exception.getMessage(),exception.getClass());\n        return R.error(400,\"数据校验出现问题\").put(\"data\",map);\n    }\n\n}\n\n```\n\n上面的代码,通过exceptionhandler设置value值进行对参数格式不合法，进行统一的管理.\n\n### 默认统一处理异常(未知的)\n\n```java\n   @ExceptionHandler(value = Throwable.class)\n    public R handleException(Throwable throwable){\n        log.error(\"未知异常{},异常类型{}\",throwable.getMessage(),throwable.getClass());\n        return R.error(BizCodeEnum.UNKNOW_EXEPTION.getCode(),BizCodeEnum.UNKNOW_EXEPTION.getMsg());\n    }\n```\n\n直接截断throwable异常，\n\n## 系统错误码（枚举类）\n\n使用统一的管理错误码的类。对错误码以及错误提示进行统一的管理。\n\n```java\npublic enum BizCodeEnum {\n\n   \n    UNKNOW_EXEPTION(10000,\"系统未知异常\"),\n\n    VALID_EXCEPTION( 10001,\"参数格式校验失败\");\n\n    private int code;\n    private String msg;\n\n    BizCodeEnum(int code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n}\n```\n\n\n\n# 分组校验(可以使用多个VO进行代替解决)\n\n不同的场景使用不同的校验，比如说添加时，和插入时这个是不同的。\n\n使用groups\n\n使用@valid\n\n\n","slug":"gmall文档/JSR303校验","published":1,"updated":"2022-07-02T08:37:06.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x3w0007b6qf93970cxp","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>后端开启校验在实体类中使用注解@NotNull、@NotBlank之类的这些类都在javax.validation.constraints包下</p>\n<p>访问方法:双击shift进行搜索方法.</p>\n<p>所有的校验注解在validationMessages_zh_cn.peoperties这个是中文注解</p>\n<p>然后在controller对应的entity传参数中添加<code>@valid</code>开启校验功能。</p>\n<h1 id=\"valid和-validation区别\"><a href=\"#valid和-validation区别\" class=\"headerlink\" title=\"@valid和@validation区别\"></a>@valid和@validation区别</h1><p>@valid是一个标准没有分组功能，@validation具有分组功能。</p>\n<h1 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h1><ol>\n<li>引入springboot-starter-validation包</li>\n<li>给bean字段添加验证注解</li>\n<li>开启校验<code>@valid</code>或者<code>@validated</code>,开启之后会有一个默认的响应</li>\n<li>通过一个统一的异常处理类进行捕获所有验证异常的异常。使用@controllerAdvice</li>\n<li>分组校验使用<code>@validated</code>(必须使用)在controller传参数之前。</li>\n</ol>\n<h2 id=\"统一的异常处理-controllerAdvice-exceptHandler\"><a href=\"#统一的异常处理-controllerAdvice-exceptHandler\" class=\"headerlink\" title=\"统一的异常处理  @controllerAdvice+@exceptHandler\"></a>统一的异常处理  @controllerAdvice+@exceptHandler</h2><p>通过抽取异常处理,进行统一的管理.</p>\n<h3 id=\"针对特定的错误进行集中处理\"><a href=\"#针对特定的错误进行集中处理\" class=\"headerlink\" title=\"针对特定的错误进行集中处理\"></a>针对特定的错误进行集中处理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestControllerAdvice(basePackages = &quot;com.bigdata.gulimall.product.controller&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GulimallExceptionAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R <span class=\"title function_\">handleValidException</span><span class=\"params\">(MethodArgumentNotValidException exception)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; map=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">BindingResult</span> <span class=\"variable\">bindingResult</span> <span class=\"operator\">=</span> exception.getBindingResult();</span><br><span class=\"line\">        bindingResult.getFieldErrors().forEach(fieldError -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> fieldError.getDefaultMessage();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> fieldError.getField();</span><br><span class=\"line\">            map.put(field,message);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;数据校验出现问题&#123;&#125;,异常类型&#123;&#125;&quot;</span>,exception.getMessage(),exception.getClass());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.error(<span class=\"number\">400</span>,<span class=\"string\">&quot;数据校验出现问题&quot;</span>).put(<span class=\"string\">&quot;data&quot;</span>,map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码,通过exceptionhandler设置value值进行对参数格式不合法，进行统一的管理.</p>\n<h3 id=\"默认统一处理异常-未知的\"><a href=\"#默认统一处理异常-未知的\" class=\"headerlink\" title=\"默认统一处理异常(未知的)\"></a>默认统一处理异常(未知的)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(value = Throwable.class)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> R <span class=\"title function_\">handleException</span><span class=\"params\">(Throwable throwable)</span>&#123;</span><br><span class=\"line\">     log.error(<span class=\"string\">&quot;未知异常&#123;&#125;,异常类型&#123;&#125;&quot;</span>,throwable.getMessage(),throwable.getClass());</span><br><span class=\"line\">     <span class=\"keyword\">return</span> R.error(BizCodeEnum.UNKNOW_EXEPTION.getCode(),BizCodeEnum.UNKNOW_EXEPTION.getMsg());</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>直接截断throwable异常，</p>\n<h2 id=\"系统错误码（枚举类）\"><a href=\"#系统错误码（枚举类）\" class=\"headerlink\" title=\"系统错误码（枚举类）\"></a>系统错误码（枚举类）</h2><p>使用统一的管理错误码的类。对错误码以及错误提示进行统一的管理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">BizCodeEnum</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">    UNKNOW_EXEPTION(<span class=\"number\">10000</span>,<span class=\"string\">&quot;系统未知异常&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    VALID_EXCEPTION( <span class=\"number\">10001</span>,<span class=\"string\">&quot;参数格式校验失败&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    BizCodeEnum(<span class=\"type\">int</span> code, String msg) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getMsg</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"分组校验-可以使用多个VO进行代替解决\"><a href=\"#分组校验-可以使用多个VO进行代替解决\" class=\"headerlink\" title=\"分组校验(可以使用多个VO进行代替解决)\"></a>分组校验(可以使用多个VO进行代替解决)</h1><p>不同的场景使用不同的校验，比如说添加时，和插入时这个是不同的。</p>\n<p>使用groups</p>\n<p>使用@valid</p>\n","site":{"data":{}},"cover":"https://img2.wallspic.com/crops/9/1/8/8/6/168819/168819-chao_ji_pao_che-pao_che-lun_tai-che_deng-1920x1080.jpg","excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>后端开启校验在实体类中使用注解@NotNull、@NotBlank之类的这些类都在javax.validation.constraints包下</p>\n<p>访问方法:双击shift进行搜索方法.</p>\n<p>所有的校验注解在validationMessages_zh_cn.peoperties这个是中文注解</p>\n<p>然后在controller对应的entity传参数中添加<code>@valid</code>开启校验功能。</p>\n<h1 id=\"valid和-validation区别\"><a href=\"#valid和-validation区别\" class=\"headerlink\" title=\"@valid和@validation区别\"></a>@valid和@validation区别</h1><p>@valid是一个标准没有分组功能，@validation具有分组功能。</p>\n<h1 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h1><ol>\n<li>引入springboot-starter-validation包</li>\n<li>给bean字段添加验证注解</li>\n<li>开启校验<code>@valid</code>或者<code>@validated</code>,开启之后会有一个默认的响应</li>\n<li>通过一个统一的异常处理类进行捕获所有验证异常的异常。使用@controllerAdvice</li>\n<li>分组校验使用<code>@validated</code>(必须使用)在controller传参数之前。</li>\n</ol>\n<h2 id=\"统一的异常处理-controllerAdvice-exceptHandler\"><a href=\"#统一的异常处理-controllerAdvice-exceptHandler\" class=\"headerlink\" title=\"统一的异常处理  @controllerAdvice+@exceptHandler\"></a>统一的异常处理  @controllerAdvice+@exceptHandler</h2><p>通过抽取异常处理,进行统一的管理.</p>\n<h3 id=\"针对特定的错误进行集中处理\"><a href=\"#针对特定的错误进行集中处理\" class=\"headerlink\" title=\"针对特定的错误进行集中处理\"></a>针对特定的错误进行集中处理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestControllerAdvice(basePackages = &quot;com.bigdata.gulimall.product.controller&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GulimallExceptionAdvice</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R <span class=\"title function_\">handleValidException</span><span class=\"params\">(MethodArgumentNotValidException exception)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; map=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">BindingResult</span> <span class=\"variable\">bindingResult</span> <span class=\"operator\">=</span> exception.getBindingResult();</span><br><span class=\"line\">        bindingResult.getFieldErrors().forEach(fieldError -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> fieldError.getDefaultMessage();</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> fieldError.getField();</span><br><span class=\"line\">            map.put(field,message);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;数据校验出现问题&#123;&#125;,异常类型&#123;&#125;&quot;</span>,exception.getMessage(),exception.getClass());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.error(<span class=\"number\">400</span>,<span class=\"string\">&quot;数据校验出现问题&quot;</span>).put(<span class=\"string\">&quot;data&quot;</span>,map);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码,通过exceptionhandler设置value值进行对参数格式不合法，进行统一的管理.</p>\n<h3 id=\"默认统一处理异常-未知的\"><a href=\"#默认统一处理异常-未知的\" class=\"headerlink\" title=\"默认统一处理异常(未知的)\"></a>默认统一处理异常(未知的)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ExceptionHandler(value = Throwable.class)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> R <span class=\"title function_\">handleException</span><span class=\"params\">(Throwable throwable)</span>&#123;</span><br><span class=\"line\">     log.error(<span class=\"string\">&quot;未知异常&#123;&#125;,异常类型&#123;&#125;&quot;</span>,throwable.getMessage(),throwable.getClass());</span><br><span class=\"line\">     <span class=\"keyword\">return</span> R.error(BizCodeEnum.UNKNOW_EXEPTION.getCode(),BizCodeEnum.UNKNOW_EXEPTION.getMsg());</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>直接截断throwable异常，</p>\n<h2 id=\"系统错误码（枚举类）\"><a href=\"#系统错误码（枚举类）\" class=\"headerlink\" title=\"系统错误码（枚举类）\"></a>系统错误码（枚举类）</h2><p>使用统一的管理错误码的类。对错误码以及错误提示进行统一的管理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">BizCodeEnum</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">    UNKNOW_EXEPTION(<span class=\"number\">10000</span>,<span class=\"string\">&quot;系统未知异常&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">    VALID_EXCEPTION( <span class=\"number\">10001</span>,<span class=\"string\">&quot;参数格式校验失败&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String msg;</span><br><span class=\"line\"></span><br><span class=\"line\">    BizCodeEnum(<span class=\"type\">int</span> code, String msg) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.msg = msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getMsg</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"分组校验-可以使用多个VO进行代替解决\"><a href=\"#分组校验-可以使用多个VO进行代替解决\" class=\"headerlink\" title=\"分组校验(可以使用多个VO进行代替解决)\"></a>分组校验(可以使用多个VO进行代替解决)</h1><p>不同的场景使用不同的校验，比如说添加时，和插入时这个是不同的。</p>\n<p>使用groups</p>\n<p>使用@valid</p>\n"},{"_content":"# 配置全局逻辑删除\n\n在application.yml中配置\n\n```yml\nmybatis-plus:\n  mapper-locations: classpath:/mapper/**/*.xml\n  global-config:\n    db-config:\n      id-type: auto\n      logic-delete-value: 1\t\t#主要设置这里，如果你是默认的，那么可以不用配置，\n      logic-not-delete-value: 0 \n```\n\n\n\n# 在实体类中配置\n\n找到具体字段使用注解@TableLogic\n\n```java\n/**\n * 是否显示[0-不显示，1显示]\n * value 是逻辑未删除值， deval是逻辑删除值\n */\n@TableLogic(value = \"1\",delval = \"0\")\nprivate Integer showStatus;\n```\n\n\n\n\n\n# 使用\n\n调用deleteBatchIds，批量逻辑删除元祖","source":"_posts/gmall文档/mybatis-plus 逻辑删除.md","raw":"# 配置全局逻辑删除\n\n在application.yml中配置\n\n```yml\nmybatis-plus:\n  mapper-locations: classpath:/mapper/**/*.xml\n  global-config:\n    db-config:\n      id-type: auto\n      logic-delete-value: 1\t\t#主要设置这里，如果你是默认的，那么可以不用配置，\n      logic-not-delete-value: 0 \n```\n\n\n\n# 在实体类中配置\n\n找到具体字段使用注解@TableLogic\n\n```java\n/**\n * 是否显示[0-不显示，1显示]\n * value 是逻辑未删除值， deval是逻辑删除值\n */\n@TableLogic(value = \"1\",delval = \"0\")\nprivate Integer showStatus;\n```\n\n\n\n\n\n# 使用\n\n调用deleteBatchIds，批量逻辑删除元祖","slug":"gmall文档/mybatis-plus 逻辑删除","published":1,"date":"2022-06-24T07:24:25.446Z","updated":"2022-06-24T07:24:25.446Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x3x0008b6qf6aml4r5m","content":"<h1 id=\"配置全局逻辑删除\"><a href=\"#配置全局逻辑删除\" class=\"headerlink\" title=\"配置全局逻辑删除\"></a>配置全局逻辑删除</h1><p>在application.yml中配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:/mapper/**/*.xml</span></span><br><span class=\"line\">  <span class=\"attr\">global-config:</span></span><br><span class=\"line\">    <span class=\"attr\">db-config:</span></span><br><span class=\"line\">      <span class=\"attr\">id-type:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">      <span class=\"attr\">logic-delete-value:</span> <span class=\"number\">1</span>\t\t<span class=\"comment\">#主要设置这里，如果你是默认的，那么可以不用配置，</span></span><br><span class=\"line\">      <span class=\"attr\">logic-not-delete-value:</span> <span class=\"number\">0</span> </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"在实体类中配置\"><a href=\"#在实体类中配置\" class=\"headerlink\" title=\"在实体类中配置\"></a>在实体类中配置</h1><p>找到具体字段使用注解@TableLogic</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否显示[0-不显示，1显示]</span></span><br><span class=\"line\"><span class=\"comment\"> * value 是逻辑未删除值， deval是逻辑删除值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@TableLogic(value = &quot;1&quot;,delval = &quot;0&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>调用deleteBatchIds，批量逻辑删除元祖</p>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1649133816831-de3d91d25288?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80","excerpt":"","more":"<h1 id=\"配置全局逻辑删除\"><a href=\"#配置全局逻辑删除\" class=\"headerlink\" title=\"配置全局逻辑删除\"></a>配置全局逻辑删除</h1><p>在application.yml中配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:/mapper/**/*.xml</span></span><br><span class=\"line\">  <span class=\"attr\">global-config:</span></span><br><span class=\"line\">    <span class=\"attr\">db-config:</span></span><br><span class=\"line\">      <span class=\"attr\">id-type:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">      <span class=\"attr\">logic-delete-value:</span> <span class=\"number\">1</span>\t\t<span class=\"comment\">#主要设置这里，如果你是默认的，那么可以不用配置，</span></span><br><span class=\"line\">      <span class=\"attr\">logic-not-delete-value:</span> <span class=\"number\">0</span> </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"在实体类中配置\"><a href=\"#在实体类中配置\" class=\"headerlink\" title=\"在实体类中配置\"></a>在实体类中配置</h1><p>找到具体字段使用注解@TableLogic</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 是否显示[0-不显示，1显示]</span></span><br><span class=\"line\"><span class=\"comment\"> * value 是逻辑未删除值， deval是逻辑删除值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@TableLogic(value = &quot;1&quot;,delval = &quot;0&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>调用deleteBatchIds，批量逻辑删除元祖</p>\n"},{"title":"三级菜单","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"# 三级菜单\n\n> 主要亮点是：使用了流来处理对象列表，比较的巧妙。\n\n## 编写接口(controller)\n\n\n\n## 递归调用获取子菜单\n\n### 思路\n\n使用流处理，不需要关注数据的类型，是一个通用的模版。\n\n1. 获取所有的菜单信息\n2. 将菜单信息转化成流，过滤出一级菜单（parent=0）\n3. 使用递归的方法找子菜单（prentId=children.parentId）\n    1. 过滤出父菜单的所有子菜单（filter）\n    2. 对每一个子菜单在做查询子菜单的递归操作\n    3. 完成之后进行排序，排序的时候防止空指针异常，使用三元运算。\n    4. collect收集结果\n4. 同样进行排序\n5. 最后collect收集流成一个list返回结果\n\n\n\n### 具体实现\n\n在此向操作之前还需要在entity实体类中添加一个属性，children属性存放父标签下子标签。\n\n```java\n\t@TableField(exist = false)\n\tprivate List<CategoryEntity> children;\n```\n\n>  这里还使用了一个@tableField注解来声明不需要在数据库中保存。\n\n\n\n在这个操作中使用了递归的方法实现了多级菜单的分类以及排序操作。\n\n```java\n    @Override\n    public List<CategoryEntity> categoryTree() {\n//        查询所有菜单,条件为空.\n        List<CategoryEntity> entityList = baseMapper.selectList(null);\n//        把list转化成流进行操作\n        List<CategoryEntity> categoryTree = entityList.stream()\n                .filter(item -> item.getParentCid() == 0)       //进行过滤,找到所有一级菜单\n                .map(item->{\n                    item.setChildren(categoryChildren(entityList, item));       //设置子菜单\n                    return item;\n                })\n                //进行排序菜单1,菜单2 还要进行空指针判断,不能为空\n                .sorted((menu1,menu2)-> (menu1.getSort() == null ? 0 : menu1.getSort()) - (menu2.getSort() == null ? 0 : menu2.getSort()))\n                .collect(Collectors.toList());          //转化成list类型\n\n        return categoryTree;\n    }\n\n    public List<CategoryEntity> categoryChildren(List<CategoryEntity> entityList,CategoryEntity menu){\n\n        List<CategoryEntity> childrenList = entityList.stream()\n          //对每一个\n                .filter(item-> item.getParentCid() == menu.getCatId())\n          \n                .map(item->{\n                    item.setChildren(categoryChildren(entityList, item));\n                    return item;\n                })\n                .sorted((menu1,menu2)-> (menu1.getSort() == null ? 0 : menu1.getSort()) - (menu2.getSort() == null ? 0 : menu2.getSort()))\n                .collect(Collectors.toList());\n        return childrenList;\n    }\n```\n","source":"_posts/gmall文档/三级菜单.md","raw":"title: 三级菜单\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n# 三级菜单\n\n> 主要亮点是：使用了流来处理对象列表，比较的巧妙。\n\n## 编写接口(controller)\n\n\n\n## 递归调用获取子菜单\n\n### 思路\n\n使用流处理，不需要关注数据的类型，是一个通用的模版。\n\n1. 获取所有的菜单信息\n2. 将菜单信息转化成流，过滤出一级菜单（parent=0）\n3. 使用递归的方法找子菜单（prentId=children.parentId）\n    1. 过滤出父菜单的所有子菜单（filter）\n    2. 对每一个子菜单在做查询子菜单的递归操作\n    3. 完成之后进行排序，排序的时候防止空指针异常，使用三元运算。\n    4. collect收集结果\n4. 同样进行排序\n5. 最后collect收集流成一个list返回结果\n\n\n\n### 具体实现\n\n在此向操作之前还需要在entity实体类中添加一个属性，children属性存放父标签下子标签。\n\n```java\n\t@TableField(exist = false)\n\tprivate List<CategoryEntity> children;\n```\n\n>  这里还使用了一个@tableField注解来声明不需要在数据库中保存。\n\n\n\n在这个操作中使用了递归的方法实现了多级菜单的分类以及排序操作。\n\n```java\n    @Override\n    public List<CategoryEntity> categoryTree() {\n//        查询所有菜单,条件为空.\n        List<CategoryEntity> entityList = baseMapper.selectList(null);\n//        把list转化成流进行操作\n        List<CategoryEntity> categoryTree = entityList.stream()\n                .filter(item -> item.getParentCid() == 0)       //进行过滤,找到所有一级菜单\n                .map(item->{\n                    item.setChildren(categoryChildren(entityList, item));       //设置子菜单\n                    return item;\n                })\n                //进行排序菜单1,菜单2 还要进行空指针判断,不能为空\n                .sorted((menu1,menu2)-> (menu1.getSort() == null ? 0 : menu1.getSort()) - (menu2.getSort() == null ? 0 : menu2.getSort()))\n                .collect(Collectors.toList());          //转化成list类型\n\n        return categoryTree;\n    }\n\n    public List<CategoryEntity> categoryChildren(List<CategoryEntity> entityList,CategoryEntity menu){\n\n        List<CategoryEntity> childrenList = entityList.stream()\n          //对每一个\n                .filter(item-> item.getParentCid() == menu.getCatId())\n          \n                .map(item->{\n                    item.setChildren(categoryChildren(entityList, item));\n                    return item;\n                })\n                .sorted((menu1,menu2)-> (menu1.getSort() == null ? 0 : menu1.getSort()) - (menu2.getSort() == null ? 0 : menu2.getSort()))\n                .collect(Collectors.toList());\n        return childrenList;\n    }\n```\n","slug":"gmall文档/三级菜单","published":1,"updated":"2022-07-02T08:37:06.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x3y0009b6qfd5lpgkq8","content":"<h1 id=\"三级菜单\"><a href=\"#三级菜单\" class=\"headerlink\" title=\"三级菜单\"></a>三级菜单</h1><blockquote>\n<p>主要亮点是：使用了流来处理对象列表，比较的巧妙。</p>\n</blockquote>\n<h2 id=\"编写接口-controller\"><a href=\"#编写接口-controller\" class=\"headerlink\" title=\"编写接口(controller)\"></a>编写接口(controller)</h2><h2 id=\"递归调用获取子菜单\"><a href=\"#递归调用获取子菜单\" class=\"headerlink\" title=\"递归调用获取子菜单\"></a>递归调用获取子菜单</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>使用流处理，不需要关注数据的类型，是一个通用的模版。</p>\n<ol>\n<li>获取所有的菜单信息</li>\n<li>将菜单信息转化成流，过滤出一级菜单（parent=0）</li>\n<li>使用递归的方法找子菜单（prentId=children.parentId）<ol>\n<li>过滤出父菜单的所有子菜单（filter）</li>\n<li>对每一个子菜单在做查询子菜单的递归操作</li>\n<li>完成之后进行排序，排序的时候防止空指针异常，使用三元运算。</li>\n<li>collect收集结果</li>\n</ol>\n</li>\n<li>同样进行排序</li>\n<li>最后collect收集流成一个list返回结果</li>\n</ol>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>在此向操作之前还需要在entity实体类中添加一个属性，children属性存放父标签下子标签。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@TableField(exist = false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;CategoryEntity&gt; children;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 这里还使用了一个@tableField注解来声明不需要在数据库中保存。</p>\n</blockquote>\n<p>在这个操作中使用了递归的方法实现了多级菜单的分类以及排序操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;CategoryEntity&gt; <span class=\"title function_\">categoryTree</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        查询所有菜单,条件为空.</span></span><br><span class=\"line\">        List&lt;CategoryEntity&gt; entityList = baseMapper.selectList(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"comment\">//        把list转化成流进行操作</span></span><br><span class=\"line\">        List&lt;CategoryEntity&gt; categoryTree = entityList.stream()</span><br><span class=\"line\">                .filter(item -&gt; item.getParentCid() == <span class=\"number\">0</span>)       <span class=\"comment\">//进行过滤,找到所有一级菜单</span></span><br><span class=\"line\">                .map(item-&gt;&#123;</span><br><span class=\"line\">                    item.setChildren(categoryChildren(entityList, item));       <span class=\"comment\">//设置子菜单</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                <span class=\"comment\">//进行排序菜单1,菜单2 还要进行空指针判断,不能为空</span></span><br><span class=\"line\">                .sorted((menu1,menu2)-&gt; (menu1.getSort() == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : menu1.getSort()) - (menu2.getSort() == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : menu2.getSort()))</span><br><span class=\"line\">                .collect(Collectors.toList());          <span class=\"comment\">//转化成list类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> categoryTree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;CategoryEntity&gt; <span class=\"title function_\">categoryChildren</span><span class=\"params\">(List&lt;CategoryEntity&gt; entityList,CategoryEntity menu)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;CategoryEntity&gt; childrenList = entityList.stream()</span><br><span class=\"line\">          <span class=\"comment\">//对每一个</span></span><br><span class=\"line\">                .filter(item-&gt; item.getParentCid() == menu.getCatId())</span><br><span class=\"line\">          </span><br><span class=\"line\">                .map(item-&gt;&#123;</span><br><span class=\"line\">                    item.setChildren(categoryChildren(entityList, item));</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .sorted((menu1,menu2)-&gt; (menu1.getSort() == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : menu1.getSort()) - (menu2.getSort() == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : menu2.getSort()))</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> childrenList;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1653046641850-f8d2222ac839?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80","excerpt":"","more":"<h1 id=\"三级菜单\"><a href=\"#三级菜单\" class=\"headerlink\" title=\"三级菜单\"></a>三级菜单</h1><blockquote>\n<p>主要亮点是：使用了流来处理对象列表，比较的巧妙。</p>\n</blockquote>\n<h2 id=\"编写接口-controller\"><a href=\"#编写接口-controller\" class=\"headerlink\" title=\"编写接口(controller)\"></a>编写接口(controller)</h2><h2 id=\"递归调用获取子菜单\"><a href=\"#递归调用获取子菜单\" class=\"headerlink\" title=\"递归调用获取子菜单\"></a>递归调用获取子菜单</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>使用流处理，不需要关注数据的类型，是一个通用的模版。</p>\n<ol>\n<li>获取所有的菜单信息</li>\n<li>将菜单信息转化成流，过滤出一级菜单（parent=0）</li>\n<li>使用递归的方法找子菜单（prentId=children.parentId）<ol>\n<li>过滤出父菜单的所有子菜单（filter）</li>\n<li>对每一个子菜单在做查询子菜单的递归操作</li>\n<li>完成之后进行排序，排序的时候防止空指针异常，使用三元运算。</li>\n<li>collect收集结果</li>\n</ol>\n</li>\n<li>同样进行排序</li>\n<li>最后collect收集流成一个list返回结果</li>\n</ol>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>在此向操作之前还需要在entity实体类中添加一个属性，children属性存放父标签下子标签。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@TableField(exist = false)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;CategoryEntity&gt; children;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 这里还使用了一个@tableField注解来声明不需要在数据库中保存。</p>\n</blockquote>\n<p>在这个操作中使用了递归的方法实现了多级菜单的分类以及排序操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;CategoryEntity&gt; <span class=\"title function_\">categoryTree</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        查询所有菜单,条件为空.</span></span><br><span class=\"line\">        List&lt;CategoryEntity&gt; entityList = baseMapper.selectList(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"comment\">//        把list转化成流进行操作</span></span><br><span class=\"line\">        List&lt;CategoryEntity&gt; categoryTree = entityList.stream()</span><br><span class=\"line\">                .filter(item -&gt; item.getParentCid() == <span class=\"number\">0</span>)       <span class=\"comment\">//进行过滤,找到所有一级菜单</span></span><br><span class=\"line\">                .map(item-&gt;&#123;</span><br><span class=\"line\">                    item.setChildren(categoryChildren(entityList, item));       <span class=\"comment\">//设置子菜单</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                <span class=\"comment\">//进行排序菜单1,菜单2 还要进行空指针判断,不能为空</span></span><br><span class=\"line\">                .sorted((menu1,menu2)-&gt; (menu1.getSort() == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : menu1.getSort()) - (menu2.getSort() == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : menu2.getSort()))</span><br><span class=\"line\">                .collect(Collectors.toList());          <span class=\"comment\">//转化成list类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> categoryTree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;CategoryEntity&gt; <span class=\"title function_\">categoryChildren</span><span class=\"params\">(List&lt;CategoryEntity&gt; entityList,CategoryEntity menu)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;CategoryEntity&gt; childrenList = entityList.stream()</span><br><span class=\"line\">          <span class=\"comment\">//对每一个</span></span><br><span class=\"line\">                .filter(item-&gt; item.getParentCid() == menu.getCatId())</span><br><span class=\"line\">          </span><br><span class=\"line\">                .map(item-&gt;&#123;</span><br><span class=\"line\">                    item.setChildren(categoryChildren(entityList, item));</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .sorted((menu1,menu2)-&gt; (menu1.getSort() == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : menu1.getSort()) - (menu2.getSort() == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : menu2.getSort()))</span><br><span class=\"line\">                .collect(Collectors.toList());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> childrenList;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"使用mybatis进行分页查询","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"```java\npublic PageUtils queryPage(Map<String, Object> params, Long catelogId) {\n        if(catelogId==0){\n            IPage<AttrGroupEntity> page = this.page(new Query<AttrGroupEntity>().getPage(params),\n                    new QueryWrapper<AttrGroupEntity>());\n            return new PageUtils(page);\n        }\n//        从参数中获取一个key,key是检索关键字,用户查询的数据\n        String key=(String) params.get(\"key\");\n//        select * from pms_attr_group where catelog_id=? and(attr_group_id = key or attr_group_name like %?%)\n        QueryWrapper<AttrGroupEntity> wrapper = new QueryWrapper<AttrGroupEntity>().eq(\"catelog_id\", catelogId);\n        if(!StringUtils.isEmpty(key)){\n//            and接受一个consumer,函数式编程\n            wrapper.and(obj-> obj.eq(\"attr_group_id\",key).or().like(\"attr_group_name\", key));\n        }\n        IPage<AttrGroupEntity> page = page(new Query<AttrGroupEntity>().getPage(params),\n                wrapper);\n\n        return new PageUtils(page);\n    }\n```\n\n\n\n在这行代码中，有一些需要注意的点：\n\n1. this.page（）,可以使用page（），这个方法是在IService接口中进行定义了的。\n\n    \n\n    ```java\n    default <E extends IPage<T>> E page(E page, Wrapper<T> queryWrapper) {\n            return this.getBaseMapper().selectPage(page, queryWrapper);\n        }\n    \n        default <E extends IPage<T>> E page(E page) {\n            return this.page(page, Wrappers.emptyWrapper());\n        }\n    ```\n\n    所以可以通过this直接调用、使用。\n\n2. 在这个page方法中需要传入连个参数，一个是查询的表，需要new query出来，还有一个就是查询的条件，wrapper。最后通过分装类进行返回数据（包含记录数以及传输的数据等信息）\n\n​\t\t\n\n```java\npublic class PageUtils implements Serializable {\n\tprivate static final long serialVersionUID = 1L;\n\t/**\n\t * 总记录数\n\t */\n\tprivate int totalCount;\n\t/**\n\t * 每页记录数\n\t */\n\tprivate int pageSize;\n\t/**\n\t * 总页数\n\t */\n\tprivate int totalPage;\n\t/**\n\t * 当前页数\n\t */\n\tprivate int currPage;\n\t/**\n\t * 列表数据\n\t */\n\tprivate List<?> list;\n\t\n\t/**\n\t * 分页\n\t * @param list        列表数据\n\t * @param totalCount  总记录数\n\t * @param pageSize    每页记录数\n\t * @param currPage    当前页数\n\t */\n\tpublic PageUtils(List<?> list, int totalCount, int pageSize, int currPage) {\n\t\tthis.list = list;\n\t\tthis.totalCount = totalCount;\n\t\tthis.pageSize = pageSize;\n\t\tthis.currPage = currPage;\n\t\tthis.totalPage = (int)Math.ceil((double)totalCount/pageSize);\n\t}\n\n\t/**\n\t * 分页\n\t */\n\tpublic PageUtils(IPage<?> page) {\n\t\tthis.list = page.getRecords();\n\t\tthis.totalCount = (int)page.getTotal();\n\t\tthis.pageSize = (int)page.getSize();\n\t\tthis.currPage = (int)page.getCurrent();\n\t\tthis.totalPage = (int)page.getPages();\n\t}\n\n\tpublic int getTotalCount() {\n\t\treturn totalCount;\n\t}\n\n\tpublic void setTotalCount(int totalCount) {\n\t\tthis.totalCount = totalCount;\n\t}\n\n\tpublic int getPageSize() {\n\t\treturn pageSize;\n\t}\n\n\tpublic void setPageSize(int pageSize) {\n\t\tthis.pageSize = pageSize;\n\t}\n\n\tpublic int getTotalPage() {\n\t\treturn totalPage;\n\t}\n\n\tpublic void setTotalPage(int totalPage) {\n\t\tthis.totalPage = totalPage;\n\t}\n\n\tpublic int getCurrPage() {\n\t\treturn currPage;\n\t}\n\n\tpublic void setCurrPage(int currPage) {\n\t\tthis.currPage = currPage;\n\t}\n\n\tpublic List<?> getList() {\n\t\treturn list;\n\t}\n\n\tpublic void setList(List<?> list) {\n\t\tthis.list = list;\n\t}\n\t\n}\n```\n\n","source":"_posts/gmall文档/使用mybatis进行分页查询.md","raw":"title: 使用mybatis进行分页查询\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n```java\npublic PageUtils queryPage(Map<String, Object> params, Long catelogId) {\n        if(catelogId==0){\n            IPage<AttrGroupEntity> page = this.page(new Query<AttrGroupEntity>().getPage(params),\n                    new QueryWrapper<AttrGroupEntity>());\n            return new PageUtils(page);\n        }\n//        从参数中获取一个key,key是检索关键字,用户查询的数据\n        String key=(String) params.get(\"key\");\n//        select * from pms_attr_group where catelog_id=? and(attr_group_id = key or attr_group_name like %?%)\n        QueryWrapper<AttrGroupEntity> wrapper = new QueryWrapper<AttrGroupEntity>().eq(\"catelog_id\", catelogId);\n        if(!StringUtils.isEmpty(key)){\n//            and接受一个consumer,函数式编程\n            wrapper.and(obj-> obj.eq(\"attr_group_id\",key).or().like(\"attr_group_name\", key));\n        }\n        IPage<AttrGroupEntity> page = page(new Query<AttrGroupEntity>().getPage(params),\n                wrapper);\n\n        return new PageUtils(page);\n    }\n```\n\n\n\n在这行代码中，有一些需要注意的点：\n\n1. this.page（）,可以使用page（），这个方法是在IService接口中进行定义了的。\n\n    \n\n    ```java\n    default <E extends IPage<T>> E page(E page, Wrapper<T> queryWrapper) {\n            return this.getBaseMapper().selectPage(page, queryWrapper);\n        }\n    \n        default <E extends IPage<T>> E page(E page) {\n            return this.page(page, Wrappers.emptyWrapper());\n        }\n    ```\n\n    所以可以通过this直接调用、使用。\n\n2. 在这个page方法中需要传入连个参数，一个是查询的表，需要new query出来，还有一个就是查询的条件，wrapper。最后通过分装类进行返回数据（包含记录数以及传输的数据等信息）\n\n​\t\t\n\n```java\npublic class PageUtils implements Serializable {\n\tprivate static final long serialVersionUID = 1L;\n\t/**\n\t * 总记录数\n\t */\n\tprivate int totalCount;\n\t/**\n\t * 每页记录数\n\t */\n\tprivate int pageSize;\n\t/**\n\t * 总页数\n\t */\n\tprivate int totalPage;\n\t/**\n\t * 当前页数\n\t */\n\tprivate int currPage;\n\t/**\n\t * 列表数据\n\t */\n\tprivate List<?> list;\n\t\n\t/**\n\t * 分页\n\t * @param list        列表数据\n\t * @param totalCount  总记录数\n\t * @param pageSize    每页记录数\n\t * @param currPage    当前页数\n\t */\n\tpublic PageUtils(List<?> list, int totalCount, int pageSize, int currPage) {\n\t\tthis.list = list;\n\t\tthis.totalCount = totalCount;\n\t\tthis.pageSize = pageSize;\n\t\tthis.currPage = currPage;\n\t\tthis.totalPage = (int)Math.ceil((double)totalCount/pageSize);\n\t}\n\n\t/**\n\t * 分页\n\t */\n\tpublic PageUtils(IPage<?> page) {\n\t\tthis.list = page.getRecords();\n\t\tthis.totalCount = (int)page.getTotal();\n\t\tthis.pageSize = (int)page.getSize();\n\t\tthis.currPage = (int)page.getCurrent();\n\t\tthis.totalPage = (int)page.getPages();\n\t}\n\n\tpublic int getTotalCount() {\n\t\treturn totalCount;\n\t}\n\n\tpublic void setTotalCount(int totalCount) {\n\t\tthis.totalCount = totalCount;\n\t}\n\n\tpublic int getPageSize() {\n\t\treturn pageSize;\n\t}\n\n\tpublic void setPageSize(int pageSize) {\n\t\tthis.pageSize = pageSize;\n\t}\n\n\tpublic int getTotalPage() {\n\t\treturn totalPage;\n\t}\n\n\tpublic void setTotalPage(int totalPage) {\n\t\tthis.totalPage = totalPage;\n\t}\n\n\tpublic int getCurrPage() {\n\t\treturn currPage;\n\t}\n\n\tpublic void setCurrPage(int currPage) {\n\t\tthis.currPage = currPage;\n\t}\n\n\tpublic List<?> getList() {\n\t\treturn list;\n\t}\n\n\tpublic void setList(List<?> list) {\n\t\tthis.list = list;\n\t}\n\t\n}\n```\n\n","slug":"gmall文档/使用mybatis进行分页查询","published":1,"updated":"2022-07-02T08:37:06.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x40000cb6qfe3blhnv4","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> PageUtils <span class=\"title function_\">queryPage</span><span class=\"params\">(Map&lt;String, Object&gt; params, Long catelogId)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(catelogId==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            IPage&lt;AttrGroupEntity&gt; page = <span class=\"built_in\">this</span>.page(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>&lt;AttrGroupEntity&gt;().getPage(params),</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;AttrGroupEntity&gt;());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageUtils</span>(page);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        从参数中获取一个key,key是检索关键字,用户查询的数据</span></span><br><span class=\"line\">        String key=(String) params.get(<span class=\"string\">&quot;key&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//        select * from pms_attr_group where catelog_id=? and(attr_group_id = key or attr_group_name like %?%)</span></span><br><span class=\"line\">        QueryWrapper&lt;AttrGroupEntity&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;AttrGroupEntity&gt;().eq(<span class=\"string\">&quot;catelog_id&quot;</span>, catelogId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(key))&#123;</span><br><span class=\"line\"><span class=\"comment\">//            and接受一个consumer,函数式编程</span></span><br><span class=\"line\">            wrapper.and(obj-&gt; obj.eq(<span class=\"string\">&quot;attr_group_id&quot;</span>,key).or().like(<span class=\"string\">&quot;attr_group_name&quot;</span>, key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        IPage&lt;AttrGroupEntity&gt; page = page(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>&lt;AttrGroupEntity&gt;().getPage(params),</span><br><span class=\"line\">                wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageUtils</span>(page);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这行代码中，有一些需要注意的点：</p>\n<ol>\n<li><p>this.page（）,可以使用page（），这个方法是在IService接口中进行定义了的。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span> &lt;E <span class=\"keyword\">extends</span> <span class=\"title class_\">IPage</span>&lt;T&gt;&gt; E <span class=\"title function_\">page</span><span class=\"params\">(E page, Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getBaseMapper().selectPage(page, queryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;E <span class=\"keyword\">extends</span> <span class=\"title class_\">IPage</span>&lt;T&gt;&gt; E <span class=\"title function_\">page</span><span class=\"params\">(E page)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.page(page, Wrappers.emptyWrapper());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 所以可以通过this直接调用、使用。</p>\n</li>\n<li><p>在这个page方法中需要传入连个参数，一个是查询的表，需要new query出来，还有一个就是查询的条件，wrapper。最后通过分装类进行返回数据（包含记录数以及传输的数据等信息）</p>\n</li>\n</ol>\n<p>​        </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageUtils</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 总记录数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> totalCount;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 每页记录数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> pageSize;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 总页数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> totalPage;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 当前页数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> currPage;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 列表数据</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;?&gt; list;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 分页</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> list        列表数据</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> totalCount  总记录数</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> pageSize    每页记录数</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> currPage    当前页数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">PageUtils</span><span class=\"params\">(List&lt;?&gt; list, <span class=\"type\">int</span> totalCount, <span class=\"type\">int</span> pageSize, <span class=\"type\">int</span> currPage)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.list = list;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.totalCount = totalCount;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.pageSize = pageSize;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.currPage = currPage;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.totalPage = (<span class=\"type\">int</span>)Math.ceil((<span class=\"type\">double</span>)totalCount/pageSize);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 分页</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">PageUtils</span><span class=\"params\">(IPage&lt;?&gt; page)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.list = page.getRecords();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.totalCount = (<span class=\"type\">int</span>)page.getTotal();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.pageSize = (<span class=\"type\">int</span>)page.getSize();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.currPage = (<span class=\"type\">int</span>)page.getCurrent();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.totalPage = (<span class=\"type\">int</span>)page.getPages();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getTotalCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> totalCount;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTotalCount</span><span class=\"params\">(<span class=\"type\">int</span> totalCount)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.totalCount = totalCount;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getPageSize</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pageSize;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPageSize</span><span class=\"params\">(<span class=\"type\">int</span> pageSize)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.pageSize = pageSize;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getTotalPage</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> totalPage;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTotalPage</span><span class=\"params\">(<span class=\"type\">int</span> totalPage)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.totalPage = totalPage;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getCurrPage</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> currPage;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCurrPage</span><span class=\"params\">(<span class=\"type\">int</span> currPage)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.currPage = currPage;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;?&gt; getList() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setList</span><span class=\"params\">(List&lt;?&gt; list)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.list = list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1633078141386-eec9b3461294?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=326&q=80","excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> PageUtils <span class=\"title function_\">queryPage</span><span class=\"params\">(Map&lt;String, Object&gt; params, Long catelogId)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(catelogId==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            IPage&lt;AttrGroupEntity&gt; page = <span class=\"built_in\">this</span>.page(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>&lt;AttrGroupEntity&gt;().getPage(params),</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;AttrGroupEntity&gt;());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageUtils</span>(page);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        从参数中获取一个key,key是检索关键字,用户查询的数据</span></span><br><span class=\"line\">        String key=(String) params.get(<span class=\"string\">&quot;key&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//        select * from pms_attr_group where catelog_id=? and(attr_group_id = key or attr_group_name like %?%)</span></span><br><span class=\"line\">        QueryWrapper&lt;AttrGroupEntity&gt; wrapper = <span class=\"keyword\">new</span> <span class=\"title class_\">QueryWrapper</span>&lt;AttrGroupEntity&gt;().eq(<span class=\"string\">&quot;catelog_id&quot;</span>, catelogId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(key))&#123;</span><br><span class=\"line\"><span class=\"comment\">//            and接受一个consumer,函数式编程</span></span><br><span class=\"line\">            wrapper.and(obj-&gt; obj.eq(<span class=\"string\">&quot;attr_group_id&quot;</span>,key).or().like(<span class=\"string\">&quot;attr_group_name&quot;</span>, key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        IPage&lt;AttrGroupEntity&gt; page = page(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>&lt;AttrGroupEntity&gt;().getPage(params),</span><br><span class=\"line\">                wrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PageUtils</span>(page);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在这行代码中，有一些需要注意的点：</p>\n<ol>\n<li><p>this.page（）,可以使用page（），这个方法是在IService接口中进行定义了的。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span> &lt;E <span class=\"keyword\">extends</span> <span class=\"title class_\">IPage</span>&lt;T&gt;&gt; E <span class=\"title function_\">page</span><span class=\"params\">(E page, Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.getBaseMapper().selectPage(page, queryWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span> &lt;E <span class=\"keyword\">extends</span> <span class=\"title class_\">IPage</span>&lt;T&gt;&gt; E <span class=\"title function_\">page</span><span class=\"params\">(E page)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.page(page, Wrappers.emptyWrapper());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 所以可以通过this直接调用、使用。</p>\n</li>\n<li><p>在这个page方法中需要传入连个参数，一个是查询的表，需要new query出来，还有一个就是查询的条件，wrapper。最后通过分装类进行返回数据（包含记录数以及传输的数据等信息）</p>\n</li>\n</ol>\n<p>​        </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PageUtils</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 总记录数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> totalCount;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 每页记录数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> pageSize;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 总页数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> totalPage;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 当前页数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> currPage;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 列表数据</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;?&gt; list;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 分页</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> list        列表数据</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> totalCount  总记录数</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> pageSize    每页记录数</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> currPage    当前页数</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">PageUtils</span><span class=\"params\">(List&lt;?&gt; list, <span class=\"type\">int</span> totalCount, <span class=\"type\">int</span> pageSize, <span class=\"type\">int</span> currPage)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.list = list;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.totalCount = totalCount;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.pageSize = pageSize;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.currPage = currPage;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.totalPage = (<span class=\"type\">int</span>)Math.ceil((<span class=\"type\">double</span>)totalCount/pageSize);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 分页</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">PageUtils</span><span class=\"params\">(IPage&lt;?&gt; page)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.list = page.getRecords();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.totalCount = (<span class=\"type\">int</span>)page.getTotal();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.pageSize = (<span class=\"type\">int</span>)page.getSize();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.currPage = (<span class=\"type\">int</span>)page.getCurrent();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.totalPage = (<span class=\"type\">int</span>)page.getPages();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getTotalCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> totalCount;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTotalCount</span><span class=\"params\">(<span class=\"type\">int</span> totalCount)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.totalCount = totalCount;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getPageSize</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pageSize;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPageSize</span><span class=\"params\">(<span class=\"type\">int</span> pageSize)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.pageSize = pageSize;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getTotalPage</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> totalPage;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTotalPage</span><span class=\"params\">(<span class=\"type\">int</span> totalPage)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.totalPage = totalPage;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getCurrPage</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> currPage;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCurrPage</span><span class=\"params\">(<span class=\"type\">int</span> currPage)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.currPage = currPage;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;?&gt; getList() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setList</span><span class=\"params\">(List&lt;?&gt; list)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.list = list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"前端功能总结(2)","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"拖动菜单栏  P54\n\n逻辑判断‼️\n\n\n\n前端字段校验 p66\n\n子组件向父组件传递数据p72","source":"_posts/gmall文档/前端功能总结(2).md","raw":"title: 前端功能总结(2)\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n拖动菜单栏  P54\n\n逻辑判断‼️\n\n\n\n前端字段校验 p66\n\n子组件向父组件传递数据p72","slug":"gmall文档/前端功能总结(2)","published":1,"updated":"2022-07-02T08:37:06.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x41000db6qfbdqe1us0","content":"<p>拖动菜单栏  P54</p>\n<p>逻辑判断‼️</p>\n<p>前端字段校验 p66</p>\n<p>子组件向父组件传递数据p72</p>\n","site":{"data":{}},"cover":"https://img3.wallspic.com/previews/1/8/7/8/6/168781/168781-lu_jiao-zi_ran_huan_jing-zi_ran_jing_guan-zhi_bei-mu-550x310.jpg","excerpt":"","more":"<p>拖动菜单栏  P54</p>\n<p>逻辑判断‼️</p>\n<p>前端字段校验 p66</p>\n<p>子组件向父组件传递数据p72</p>\n"},{"title":"前端功能总结","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"拖动菜单栏  P54\n\n逻辑判断‼️\n\n\n\n前端字段校验 p66","source":"_posts/gmall文档/前端功能总结.md","raw":"title: 前端功能总结\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n拖动菜单栏  P54\n\n逻辑判断‼️\n\n\n\n前端字段校验 p66","slug":"gmall文档/前端功能总结","published":1,"updated":"2022-07-02T08:37:06.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x43000ib6qfdd5j6x00","content":"<p>拖动菜单栏  P54</p>\n<p>逻辑判断‼️</p>\n<p>前端字段校验 p66</p>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1653311918738-0c43e51fb962?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80","excerpt":"","more":"<p>拖动菜单栏  P54</p>\n<p>逻辑判断‼️</p>\n<p>前端字段校验 p66</p>\n"},{"title":"接口和抽象类使用的好处","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"# 总结\n\n抽象类实现接口，抽象类中可以实现一些接口的方法，然后在具体的实现过程中（使用一个类来继承抽象类的时候），不需要重新写那个被实现的方法，直接重写没有实现的方法，从而实现不用全部实现的效果。\n\n# 接下来举例说明\n\n首先一个接口\n\n```java\npublic interface myInt{\n\tvoid method1();\n\tvoid method2();\n}\n```\n\n\n\n```java\npublic abstract class abclass implements myInt{\n\tabstact void hah();\t\t#抽象类自己的方法\n\tpublic void method2(){\n\t\tSystem.out.println(\"抽象类重写menthods2打印\");\n\t}\n\tstatic void hah{\n\t\tSystem.out.println(\"抽象类的方法打印\");\n\t}\n\t\n}\n```\n\n\n\n\n\n具体实际应用\n\n```java\npublic class test extends abclass{\n  @override\n  void hah(){\n    System.out.println(\"test类打印\");\n  }\n  \n  @Override\n  void methods1(){\n    System.out.println(\"test重写接口methods1方法\")\n  }\n}\n```\n\n\n\n从上面这个例子可以看出，在抽象类中对一些接口可以进行初始化，后面具体实现的时候可以不需要再对此方法进行重写。简化开发。\n\n# 应用场景\n\n在开发中有很多类需要使用某个接口的很多方法，有很多是相同的不需要改变，只有极少需要改变，一般使用这个","source":"_posts/gmall文档/接口和抽象类使用的好处.md","raw":"title: 接口和抽象类使用的好处\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n# 总结\n\n抽象类实现接口，抽象类中可以实现一些接口的方法，然后在具体的实现过程中（使用一个类来继承抽象类的时候），不需要重新写那个被实现的方法，直接重写没有实现的方法，从而实现不用全部实现的效果。\n\n# 接下来举例说明\n\n首先一个接口\n\n```java\npublic interface myInt{\n\tvoid method1();\n\tvoid method2();\n}\n```\n\n\n\n```java\npublic abstract class abclass implements myInt{\n\tabstact void hah();\t\t#抽象类自己的方法\n\tpublic void method2(){\n\t\tSystem.out.println(\"抽象类重写menthods2打印\");\n\t}\n\tstatic void hah{\n\t\tSystem.out.println(\"抽象类的方法打印\");\n\t}\n\t\n}\n```\n\n\n\n\n\n具体实际应用\n\n```java\npublic class test extends abclass{\n  @override\n  void hah(){\n    System.out.println(\"test类打印\");\n  }\n  \n  @Override\n  void methods1(){\n    System.out.println(\"test重写接口methods1方法\")\n  }\n}\n```\n\n\n\n从上面这个例子可以看出，在抽象类中对一些接口可以进行初始化，后面具体实现的时候可以不需要再对此方法进行重写。简化开发。\n\n# 应用场景\n\n在开发中有很多类需要使用某个接口的很多方法，有很多是相同的不需要改变，只有极少需要改变，一般使用这个","slug":"gmall文档/接口和抽象类使用的好处","published":1,"updated":"2022-07-02T08:37:06.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x44000lb6qf3jecd1hj","content":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>抽象类实现接口，抽象类中可以实现一些接口的方法，然后在具体的实现过程中（使用一个类来继承抽象类的时候），不需要重新写那个被实现的方法，直接重写没有实现的方法，从而实现不用全部实现的效果。</p>\n<h1 id=\"接下来举例说明\"><a href=\"#接下来举例说明\" class=\"headerlink\" title=\"接下来举例说明\"></a>接下来举例说明</h1><p>首先一个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">myInt</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">abclass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">myInt</span>&#123;</span><br><span class=\"line\">\tabstact <span class=\"keyword\">void</span> <span class=\"title function_\">hah</span><span class=\"params\">()</span>;\t\t#抽象类自己的方法</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;抽象类重写menthods2打印&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> hah&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;抽象类的方法打印&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>具体实际应用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">abclass</span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">hah</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;test类打印&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">methods1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;test重写接口methods1方法&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从上面这个例子可以看出，在抽象类中对一些接口可以进行初始化，后面具体实现的时候可以不需要再对此方法进行重写。简化开发。</p>\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><p>在开发中有很多类需要使用某个接口的很多方法，有很多是相同的不需要改变，只有极少需要改变，一般使用这个</p>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1653450283256-a4df3d86ba65?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=386&q=80","excerpt":"","more":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>抽象类实现接口，抽象类中可以实现一些接口的方法，然后在具体的实现过程中（使用一个类来继承抽象类的时候），不需要重新写那个被实现的方法，直接重写没有实现的方法，从而实现不用全部实现的效果。</p>\n<h1 id=\"接下来举例说明\"><a href=\"#接下来举例说明\" class=\"headerlink\" title=\"接下来举例说明\"></a>接下来举例说明</h1><p>首先一个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">myInt</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">abclass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">myInt</span>&#123;</span><br><span class=\"line\">\tabstact <span class=\"keyword\">void</span> <span class=\"title function_\">hah</span><span class=\"params\">()</span>;\t\t#抽象类自己的方法</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;抽象类重写menthods2打印&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">void</span> hah&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;抽象类的方法打印&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>具体实际应用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">abclass</span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">hah</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;test类打印&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">methods1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;test重写接口methods1方法&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从上面这个例子可以看出，在抽象类中对一些接口可以进行初始化，后面具体实现的时候可以不需要再对此方法进行重写。简化开发。</p>\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><p>在开发中有很多类需要使用某个接口的很多方法，有很多是相同的不需要改变，只有极少需要改变，一般使用这个</p>\n"},{"title":"文件上传","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"[Toc]\n\n\n\n# 基本思路\n\n用户请求上传文件，服务器处理这个请求，并且返回一个签名给到用户，用户通过这个签名来访问，文件存储系统，进行上传文件。文件存储系统的账号密码都是保存在自己服务器中的，比较的安全。\n\n![](https://s2.loli.net/2022/06/20/mDvuMC3e7iBynNj.png)\n\n\n\n# 实现\n\nminio使用指南\n\n使用一个新的maven项目来存放所有的第三方包。\n\n## 加入到父项目项目中（聚合）\n\n## 添加依赖包\n\n### 还需要加入common，\n\n### minio注意\n\n这里使用的是minio的依赖包，这里注意版本号的问题，需要排除okhttp版本\n\n```xml\n        <dependency>\n            <groupId>io.minio</groupId>\n            <artifactId>minio</artifactId>\n            <version>8.4.2</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>com.squareup.okhttp3</groupId>\n                    <artifactId>okhttp</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>me.tongfei</groupId>\n            <artifactId>progressbar</artifactId>\n            <version>0.5.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.squareup.okhttp3</groupId>\n            <artifactId>okhttp</artifactId>\n            <version>4.8.1</version>\n        </dependency>\n```\n\n\n\n## 注册到nacos中，并且配置配置中心等信息\n\n加入到minio中的配置信息\n\n```yml\n#minio配置\nminio:\n  access-key: admin      #key就是docker初始化是设置的，密钥相同\n  secret-key: admin123456\n  url: http://120.55.125.132:9000\n  bucket: gmall\n  min: 10*1024    #10kb\n  max: 10*1024*1024   #10MB\n```\n\n\n\n## 使用一个配置类获取配置\n\n```java\n@Configuration\n@Data\npublic class MinioConfiguration {\n    @Value(\"${minio.access-key}\")\n    private String accessKey;\n    @Value(\"${minio.secret-key}\")\n    private String secretKey;\n    @Value(\"${minio.url}\")\n    private String url;\n    @Value(\"${minio.bucket}\")\n    private String bucketName;\n\n    @Bean\n    public MinioClient minioClient() {\n        return MinioClient.builder()\n                .endpoint(url)\n                .credentials(accessKey, secretKey)\n                .build();\n    }\n}\n```\n\n\n\n## 业务逻辑方面\n\n### service服务\n\n```java\n@Component\n@Slf4j\npublic class MinioClientPolicy {\n    @Autowired\n    private MinioConfiguration minioConfiguration;\n\n    @Autowired\n    private MinioClient minioClient;\n\n    @Value(\"${minio.min}\")\n    private String min;\n\n    @Value(\"${minio.max}\")\n    private String max;\n\n    /**\n     * 用户获得上传签名\n     *\n     * @param fileName 上传文件\n     * @param time     过期时间,指定\n     * @return\n     */\n    public Map getPolicy(String fileName, ZonedDateTime time) {\n//        给储存桶创建一个上传策略,过期时间是time\n        PostPolicy postPolicy = new PostPolicy(minioConfiguration.getBucketName(), time);\n\n//        设置一个参数key,值为上传对象的名称\n        postPolicy.addEqualsCondition(\"key\", fileName);\n//        设置content-type,表示只能上传图片\n        postPolicy.addStartsWithCondition(\"Content-type\", \"image/\");\n//        postPolicy.addContentLengthRangeCondition(Integer.valueOf(min), Integer.valueOf(max));\n        Map<String, String> map = null;\n        try {\n//            获得对象上传的策略,包括签名,文件信息,路径,\n            map = minioClient.getPresignedPostFormData(postPolicy);\n            map.put(\"host\", minioConfiguration.getUrl() + \"/\" + minioConfiguration.getBucketName());\n            return map;\n        } catch (Exception e) {\n            log.error(\"请求文件上传策略失败!错误原因:[{}]\", e.getMessage());\n        }\n        return null;\n    }\n\n    /**\n     * 获取上传文件的url\n     * @param objectName\n     * @param method\n     * @param time\n     * @param timeUnit\n     * @return\n     */\n    public String getPolicyUrl(String objectName, Method method, int time, TimeUnit timeUnit) {\n        try {\n            return minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()\n                    .method(method)\n                    .bucket(minioConfiguration.getBucketName())\n                    .object(objectName)\n                    .expiry(time, timeUnit).build());\n        } catch (Exception e) {\n            log.info(\"获取上传url失败!\");\n        }\n        return null;\n    }\n\n    /**\n     * 通过文件名称获取url\n     * @param objectName\n     * @param time\n     * @param timeUnit\n     * @return\n     */\n    public String getUrl(String objectName, int time, TimeUnit timeUnit) {\n        String url = null;\n        try {\n            url = minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()\n                    .method(Method.GET)\n                    .bucket(minioConfiguration.getBucketName())\n                    .object(objectName)\n                    .expiry(time, timeUnit).build());\n        } catch (Exception e) {\n            log.error(\"根据文件名称获取文件url失败!,失败原因:[{}]\",e.getMessage());\n        }\n        return url;\n    }\n}\n```\n\n\n\n### controller\n\n```java\n@RestController\n@RequestMapping(\"third-party/\")\npublic class OssController {\n\n    @Autowired\n    private MinioClientPolicy minioClientPolicy;\n    \n    /**\n     * 获得上传的url地址\n     * @param fileName\n     * @return\n     */\n    @GetMapping(\"/uploadUrl\")\n    public R uploadUrl(@RequestParam(\"fileName\") String fileName) {\n        String url = minioClientPolicy.getPolicyUrl(fileName, Method.PUT, 2, TimeUnit.MINUTES);\n        return R.ok().put(\"data\",url);\n    }\n}\n\n```\n\n\n\n一个方法是获取上传策略，作用是获取令牌，\n\n另一个是获取上传url路径，有了令牌就需要，用户通过浏览器自己上传文件而不是服务器进行上传。\n\n最后返回的url地址，可以通过put请求进行上传文件。\n\n# 前后端联调\n\n## 后端业务\n\n### 注意事项:\n\n> 需要使用put请求,官方要求,get请求是获得文件的访问地址,post请求会报错.\n\n## 前端业务\n\n### 技术\n\n前端采取的是elementui 的el-upload组件,以及vue\n\n### 实现\n\n```html\n<el-upload\n      action=\"https://jsonplder.typiposts/\"\t\t#这里随便填写,我们不使用这个默认的上传方式\n      list-type=\"picture\"\t\t\n      :multiple=\"false\"\t\t\t\n      :show-file-list=\"showFileList\"\n      :file-list=\"fileList\"\t\t可以进行回显的文件列表\n      :http-request=\"upload\"\t\t#在这里就是定义使用自己的上传方法.upload\n      :before-upload=\"beforeUpload\"\n      :on-remove=\"handleRemove\"\n      :on-success=\"handleUploadSuccess\"\n      :on-preview=\"handlePreview\"\n    >\n      <el-button size=\"small\" type=\"primary\">点击上传</el-button>\n      <div slot=\"tip\" class=\"el-upload__tip\">\n        只能上传jpg/png文件，且不超过10MB\n      </div>\n    </el-upload>\n```\n\n\n\n```js\n/**\n * 文件上传之前的操作,在这前后端进行交互,获得minio的签名,后端会返回给前端,前端进行保存\n * @param {*} file \n */\nbeforeUpload(file) {\n      let _self = this;\n      console.log(file);\n      let ext = file.name.substring(file.name.lastIndexOf(\".\") + 1);\n      console.log(ext);\n      let filename = getUUID() + \".\" + ext;\n      this.fileName = filename;\n      return new Promise((resolve, reject) => {\n        http({\n          url: http.adornUrl(\"/thirdparty/uploadUrl\"),\n          method: \"get\",\n          params: { fileName: filename }\n        })\n          .then(response => {\n            _self.minioUrl = response.data.data;\n            console.log(this.minioUrl);\n            resolve(true);\n          })\n          .catch(err => {\n            reject(false);\n          });\n      });\n},\n/**\n * 重写了文件上传,在这里上传文件,通过后端返回给我们的url地址.使用put进行上传.\n * @param {*} res \n * @param {*} file \n */\n    upload(file) {\n      let binFile = file.file;\n      return new Promise((resolve, reject) => {\n        http({\n          url:this.minioUrl,\n          method: \"put\",\n          data:{\n            file:binFile\n          }\n        }).then(res=>{\n        console.log(\"文件上传成功\");\n          resolve(true)\n        }).catch(error=>{\n          console.log(\"文件上传失败\");\n          reject(false)\n        })\n      });\n    },\n```\n\n\n\n### 总结\n\n三个步骤，\n\n1. 获得令牌，上传文件\n2. 通过令牌获取上传的url。\n3. 用户通过返回的url进行上传文件\n\n\n\n# 网关配置\n\n和前面差不多，基本上一致。\n\n\n\n\n\n# 遇到的问题\n\n## @value获得不到数据\n\n版本原因，需要降低版本，springcloud版本和主项目一致。\n\n\n\n\n\n## jar包冲突\n\n![](https://s2.loli.net/2022/06/20/A397lFm5uYedDKG.png)\n\n### **原因：**\n\n根据上面的异常信息分析，可能是okhttp依赖冲突造成的服务启动失败，因为minio底层要依赖okhttp进行和minio服务端进行通信，由于项目中多个依赖底层都依赖了不同版本的okhttp，导致这里的okhttp因版本不同，某些方法不可用，尝试降级minio的版本，如下：最好排除掉版本中原来的okhttp。\n\n### 解决方法\n\n```xml\n        <dependency>\n            <groupId>io.minio</groupId>\n            <artifactId>minio</artifactId>\n            <version>8.4.2</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>com.squareup.okhttp3</groupId>\n                    <artifactId>okhttp</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>me.tongfei</groupId>\n            <artifactId>progressbar</artifactId>\n            <version>0.5.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.squareup.okhttp3</groupId>\n            <artifactId>okhttp</artifactId>\n            <version>4.8.1</version>\n        </dependency>\n```\n\n## 前端上传不了数据一直报错\n\n### 情况:\n\n可以通过postman上传文件,但是就是不可以使用vue+element上传。\n\n### 解决：重写默认的upload方法解决，使用put请求\n\n一开始使用的是别人封装好的包进行请求地址。也就是把file二进制文件放到了params进行put请求，最后还是分析postman和前端上传的不同发现的。以后遇到这样的问题一定要进行比较发现问题（postman、vue）。\n\n\n\n```js\nreturn new Promise((resolve, reject) => {\n        http({\n          url:this.minioUrl,\n          method: \"put\",\n          data:{\n            file:binFile\t\t\t有问题不能使用data进行传参，这样会出现文件格式不正确的情况，需要使用binary格式上传\t\t使用date: binFile\n          }\n        }).then(res=>{\n        console.log(\"文件上传成功\");\n          resolve(true)\n        }).catch(error=>{\n          console.log(\"文件上传失败\");\n          reject(false)\n        })\n      });\n```\n\n\n\n## 文件无法预览\n\n结局上传问题之后，还没有完全完成，现在的问题就是上传没有问题但是就是没有办法下载预览，也就是文件提示格式是错误的。\n\n### 解决：\n\n这个问题出现的原因是我使用的是data进行上传对象，这样写的是一个对象到文件中并不是一个二进制文件，这个文件包含了一些头信息之类的。\n\n只需要把上传的文件改成一个二进制文件,之前是一个对象\n\n**前后对比**\n\n```js\ndata: binFile\t\t后\ndata:{file:binFile}\t\t前\n```\n\n\n\n","source":"_posts/gmall文档/文件上传.md","raw":"title: 文件上传\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n[Toc]\n\n\n\n# 基本思路\n\n用户请求上传文件，服务器处理这个请求，并且返回一个签名给到用户，用户通过这个签名来访问，文件存储系统，进行上传文件。文件存储系统的账号密码都是保存在自己服务器中的，比较的安全。\n\n![](https://s2.loli.net/2022/06/20/mDvuMC3e7iBynNj.png)\n\n\n\n# 实现\n\nminio使用指南\n\n使用一个新的maven项目来存放所有的第三方包。\n\n## 加入到父项目项目中（聚合）\n\n## 添加依赖包\n\n### 还需要加入common，\n\n### minio注意\n\n这里使用的是minio的依赖包，这里注意版本号的问题，需要排除okhttp版本\n\n```xml\n        <dependency>\n            <groupId>io.minio</groupId>\n            <artifactId>minio</artifactId>\n            <version>8.4.2</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>com.squareup.okhttp3</groupId>\n                    <artifactId>okhttp</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>me.tongfei</groupId>\n            <artifactId>progressbar</artifactId>\n            <version>0.5.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.squareup.okhttp3</groupId>\n            <artifactId>okhttp</artifactId>\n            <version>4.8.1</version>\n        </dependency>\n```\n\n\n\n## 注册到nacos中，并且配置配置中心等信息\n\n加入到minio中的配置信息\n\n```yml\n#minio配置\nminio:\n  access-key: admin      #key就是docker初始化是设置的，密钥相同\n  secret-key: admin123456\n  url: http://120.55.125.132:9000\n  bucket: gmall\n  min: 10*1024    #10kb\n  max: 10*1024*1024   #10MB\n```\n\n\n\n## 使用一个配置类获取配置\n\n```java\n@Configuration\n@Data\npublic class MinioConfiguration {\n    @Value(\"${minio.access-key}\")\n    private String accessKey;\n    @Value(\"${minio.secret-key}\")\n    private String secretKey;\n    @Value(\"${minio.url}\")\n    private String url;\n    @Value(\"${minio.bucket}\")\n    private String bucketName;\n\n    @Bean\n    public MinioClient minioClient() {\n        return MinioClient.builder()\n                .endpoint(url)\n                .credentials(accessKey, secretKey)\n                .build();\n    }\n}\n```\n\n\n\n## 业务逻辑方面\n\n### service服务\n\n```java\n@Component\n@Slf4j\npublic class MinioClientPolicy {\n    @Autowired\n    private MinioConfiguration minioConfiguration;\n\n    @Autowired\n    private MinioClient minioClient;\n\n    @Value(\"${minio.min}\")\n    private String min;\n\n    @Value(\"${minio.max}\")\n    private String max;\n\n    /**\n     * 用户获得上传签名\n     *\n     * @param fileName 上传文件\n     * @param time     过期时间,指定\n     * @return\n     */\n    public Map getPolicy(String fileName, ZonedDateTime time) {\n//        给储存桶创建一个上传策略,过期时间是time\n        PostPolicy postPolicy = new PostPolicy(minioConfiguration.getBucketName(), time);\n\n//        设置一个参数key,值为上传对象的名称\n        postPolicy.addEqualsCondition(\"key\", fileName);\n//        设置content-type,表示只能上传图片\n        postPolicy.addStartsWithCondition(\"Content-type\", \"image/\");\n//        postPolicy.addContentLengthRangeCondition(Integer.valueOf(min), Integer.valueOf(max));\n        Map<String, String> map = null;\n        try {\n//            获得对象上传的策略,包括签名,文件信息,路径,\n            map = minioClient.getPresignedPostFormData(postPolicy);\n            map.put(\"host\", minioConfiguration.getUrl() + \"/\" + minioConfiguration.getBucketName());\n            return map;\n        } catch (Exception e) {\n            log.error(\"请求文件上传策略失败!错误原因:[{}]\", e.getMessage());\n        }\n        return null;\n    }\n\n    /**\n     * 获取上传文件的url\n     * @param objectName\n     * @param method\n     * @param time\n     * @param timeUnit\n     * @return\n     */\n    public String getPolicyUrl(String objectName, Method method, int time, TimeUnit timeUnit) {\n        try {\n            return minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()\n                    .method(method)\n                    .bucket(minioConfiguration.getBucketName())\n                    .object(objectName)\n                    .expiry(time, timeUnit).build());\n        } catch (Exception e) {\n            log.info(\"获取上传url失败!\");\n        }\n        return null;\n    }\n\n    /**\n     * 通过文件名称获取url\n     * @param objectName\n     * @param time\n     * @param timeUnit\n     * @return\n     */\n    public String getUrl(String objectName, int time, TimeUnit timeUnit) {\n        String url = null;\n        try {\n            url = minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()\n                    .method(Method.GET)\n                    .bucket(minioConfiguration.getBucketName())\n                    .object(objectName)\n                    .expiry(time, timeUnit).build());\n        } catch (Exception e) {\n            log.error(\"根据文件名称获取文件url失败!,失败原因:[{}]\",e.getMessage());\n        }\n        return url;\n    }\n}\n```\n\n\n\n### controller\n\n```java\n@RestController\n@RequestMapping(\"third-party/\")\npublic class OssController {\n\n    @Autowired\n    private MinioClientPolicy minioClientPolicy;\n    \n    /**\n     * 获得上传的url地址\n     * @param fileName\n     * @return\n     */\n    @GetMapping(\"/uploadUrl\")\n    public R uploadUrl(@RequestParam(\"fileName\") String fileName) {\n        String url = minioClientPolicy.getPolicyUrl(fileName, Method.PUT, 2, TimeUnit.MINUTES);\n        return R.ok().put(\"data\",url);\n    }\n}\n\n```\n\n\n\n一个方法是获取上传策略，作用是获取令牌，\n\n另一个是获取上传url路径，有了令牌就需要，用户通过浏览器自己上传文件而不是服务器进行上传。\n\n最后返回的url地址，可以通过put请求进行上传文件。\n\n# 前后端联调\n\n## 后端业务\n\n### 注意事项:\n\n> 需要使用put请求,官方要求,get请求是获得文件的访问地址,post请求会报错.\n\n## 前端业务\n\n### 技术\n\n前端采取的是elementui 的el-upload组件,以及vue\n\n### 实现\n\n```html\n<el-upload\n      action=\"https://jsonplder.typiposts/\"\t\t#这里随便填写,我们不使用这个默认的上传方式\n      list-type=\"picture\"\t\t\n      :multiple=\"false\"\t\t\t\n      :show-file-list=\"showFileList\"\n      :file-list=\"fileList\"\t\t可以进行回显的文件列表\n      :http-request=\"upload\"\t\t#在这里就是定义使用自己的上传方法.upload\n      :before-upload=\"beforeUpload\"\n      :on-remove=\"handleRemove\"\n      :on-success=\"handleUploadSuccess\"\n      :on-preview=\"handlePreview\"\n    >\n      <el-button size=\"small\" type=\"primary\">点击上传</el-button>\n      <div slot=\"tip\" class=\"el-upload__tip\">\n        只能上传jpg/png文件，且不超过10MB\n      </div>\n    </el-upload>\n```\n\n\n\n```js\n/**\n * 文件上传之前的操作,在这前后端进行交互,获得minio的签名,后端会返回给前端,前端进行保存\n * @param {*} file \n */\nbeforeUpload(file) {\n      let _self = this;\n      console.log(file);\n      let ext = file.name.substring(file.name.lastIndexOf(\".\") + 1);\n      console.log(ext);\n      let filename = getUUID() + \".\" + ext;\n      this.fileName = filename;\n      return new Promise((resolve, reject) => {\n        http({\n          url: http.adornUrl(\"/thirdparty/uploadUrl\"),\n          method: \"get\",\n          params: { fileName: filename }\n        })\n          .then(response => {\n            _self.minioUrl = response.data.data;\n            console.log(this.minioUrl);\n            resolve(true);\n          })\n          .catch(err => {\n            reject(false);\n          });\n      });\n},\n/**\n * 重写了文件上传,在这里上传文件,通过后端返回给我们的url地址.使用put进行上传.\n * @param {*} res \n * @param {*} file \n */\n    upload(file) {\n      let binFile = file.file;\n      return new Promise((resolve, reject) => {\n        http({\n          url:this.minioUrl,\n          method: \"put\",\n          data:{\n            file:binFile\n          }\n        }).then(res=>{\n        console.log(\"文件上传成功\");\n          resolve(true)\n        }).catch(error=>{\n          console.log(\"文件上传失败\");\n          reject(false)\n        })\n      });\n    },\n```\n\n\n\n### 总结\n\n三个步骤，\n\n1. 获得令牌，上传文件\n2. 通过令牌获取上传的url。\n3. 用户通过返回的url进行上传文件\n\n\n\n# 网关配置\n\n和前面差不多，基本上一致。\n\n\n\n\n\n# 遇到的问题\n\n## @value获得不到数据\n\n版本原因，需要降低版本，springcloud版本和主项目一致。\n\n\n\n\n\n## jar包冲突\n\n![](https://s2.loli.net/2022/06/20/A397lFm5uYedDKG.png)\n\n### **原因：**\n\n根据上面的异常信息分析，可能是okhttp依赖冲突造成的服务启动失败，因为minio底层要依赖okhttp进行和minio服务端进行通信，由于项目中多个依赖底层都依赖了不同版本的okhttp，导致这里的okhttp因版本不同，某些方法不可用，尝试降级minio的版本，如下：最好排除掉版本中原来的okhttp。\n\n### 解决方法\n\n```xml\n        <dependency>\n            <groupId>io.minio</groupId>\n            <artifactId>minio</artifactId>\n            <version>8.4.2</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>com.squareup.okhttp3</groupId>\n                    <artifactId>okhttp</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>me.tongfei</groupId>\n            <artifactId>progressbar</artifactId>\n            <version>0.5.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.squareup.okhttp3</groupId>\n            <artifactId>okhttp</artifactId>\n            <version>4.8.1</version>\n        </dependency>\n```\n\n## 前端上传不了数据一直报错\n\n### 情况:\n\n可以通过postman上传文件,但是就是不可以使用vue+element上传。\n\n### 解决：重写默认的upload方法解决，使用put请求\n\n一开始使用的是别人封装好的包进行请求地址。也就是把file二进制文件放到了params进行put请求，最后还是分析postman和前端上传的不同发现的。以后遇到这样的问题一定要进行比较发现问题（postman、vue）。\n\n\n\n```js\nreturn new Promise((resolve, reject) => {\n        http({\n          url:this.minioUrl,\n          method: \"put\",\n          data:{\n            file:binFile\t\t\t有问题不能使用data进行传参，这样会出现文件格式不正确的情况，需要使用binary格式上传\t\t使用date: binFile\n          }\n        }).then(res=>{\n        console.log(\"文件上传成功\");\n          resolve(true)\n        }).catch(error=>{\n          console.log(\"文件上传失败\");\n          reject(false)\n        })\n      });\n```\n\n\n\n## 文件无法预览\n\n结局上传问题之后，还没有完全完成，现在的问题就是上传没有问题但是就是没有办法下载预览，也就是文件提示格式是错误的。\n\n### 解决：\n\n这个问题出现的原因是我使用的是data进行上传对象，这样写的是一个对象到文件中并不是一个二进制文件，这个文件包含了一些头信息之类的。\n\n只需要把上传的文件改成一个二进制文件,之前是一个对象\n\n**前后对比**\n\n```js\ndata: binFile\t\t后\ndata:{file:binFile}\t\t前\n```\n\n\n\n","slug":"gmall文档/文件上传","published":1,"updated":"2022-07-02T08:37:06.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x46000pb6qffagwfwfr","content":"<p>[Toc]</p>\n<h1 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h1><p>用户请求上传文件，服务器处理这个请求，并且返回一个签名给到用户，用户通过这个签名来访问，文件存储系统，进行上传文件。文件存储系统的账号密码都是保存在自己服务器中的，比较的安全。</p>\n<p><img src=\"https://s2.loli.net/2022/06/20/mDvuMC3e7iBynNj.png\"></p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>minio使用指南</p>\n<p>使用一个新的maven项目来存放所有的第三方包。</p>\n<h2 id=\"加入到父项目项目中（聚合）\"><a href=\"#加入到父项目项目中（聚合）\" class=\"headerlink\" title=\"加入到父项目项目中（聚合）\"></a>加入到父项目项目中（聚合）</h2><h2 id=\"添加依赖包\"><a href=\"#添加依赖包\" class=\"headerlink\" title=\"添加依赖包\"></a>添加依赖包</h2><h3 id=\"还需要加入common，\"><a href=\"#还需要加入common，\" class=\"headerlink\" title=\"还需要加入common，\"></a>还需要加入common，</h3><h3 id=\"minio注意\"><a href=\"#minio注意\" class=\"headerlink\" title=\"minio注意\"></a>minio注意</h3><p>这里使用的是minio的依赖包，这里注意版本号的问题，需要排除okhttp版本</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.minio<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>minio<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.4.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.squareup.okhttp3<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>okhttp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>me.tongfei<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>progressbar<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.squareup.okhttp3<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>okhttp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"注册到nacos中，并且配置配置中心等信息\"><a href=\"#注册到nacos中，并且配置配置中心等信息\" class=\"headerlink\" title=\"注册到nacos中，并且配置配置中心等信息\"></a>注册到nacos中，并且配置配置中心等信息</h2><p>加入到minio中的配置信息</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#minio配置</span></span><br><span class=\"line\"><span class=\"attr\">minio:</span></span><br><span class=\"line\">  <span class=\"attr\">access-key:</span> <span class=\"string\">admin</span>      <span class=\"comment\">#key就是docker初始化是设置的，密钥相同</span></span><br><span class=\"line\">  <span class=\"attr\">secret-key:</span> <span class=\"string\">admin123456</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">http://120.55.125.132:9000</span></span><br><span class=\"line\">  <span class=\"attr\">bucket:</span> <span class=\"string\">gmall</span></span><br><span class=\"line\">  <span class=\"attr\">min:</span> <span class=\"number\">10</span><span class=\"string\">*1024</span>    <span class=\"comment\">#10kb</span></span><br><span class=\"line\">  <span class=\"attr\">max:</span> <span class=\"number\">10</span><span class=\"string\">*1024*1024</span>   <span class=\"comment\">#10MB</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用一个配置类获取配置\"><a href=\"#使用一个配置类获取配置\" class=\"headerlink\" title=\"使用一个配置类获取配置\"></a>使用一个配置类获取配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MinioConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;minio.access-key&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accessKey;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;minio.secret-key&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String secretKey;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;minio.url&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;minio.bucket&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bucketName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MinioClient <span class=\"title function_\">minioClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MinioClient.builder()</span><br><span class=\"line\">                .endpoint(url)</span><br><span class=\"line\">                .credentials(accessKey, secretKey)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"业务逻辑方面\"><a href=\"#业务逻辑方面\" class=\"headerlink\" title=\"业务逻辑方面\"></a>业务逻辑方面</h2><h3 id=\"service服务\"><a href=\"#service服务\" class=\"headerlink\" title=\"service服务\"></a>service服务</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MinioClientPolicy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MinioConfiguration minioConfiguration;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MinioClient minioClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;minio.min&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String min;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;minio.max&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String max;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户获得上传签名</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileName 上传文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time     过期时间,指定</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">getPolicy</span><span class=\"params\">(String fileName, ZonedDateTime time)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        给储存桶创建一个上传策略,过期时间是time</span></span><br><span class=\"line\">        <span class=\"type\">PostPolicy</span> <span class=\"variable\">postPolicy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PostPolicy</span>(minioConfiguration.getBucketName(), time);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        设置一个参数key,值为上传对象的名称</span></span><br><span class=\"line\">        postPolicy.addEqualsCondition(<span class=\"string\">&quot;key&quot;</span>, fileName);</span><br><span class=\"line\"><span class=\"comment\">//        设置content-type,表示只能上传图片</span></span><br><span class=\"line\">        postPolicy.addStartsWithCondition(<span class=\"string\">&quot;Content-type&quot;</span>, <span class=\"string\">&quot;image/&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//        postPolicy.addContentLengthRangeCondition(Integer.valueOf(min), Integer.valueOf(max));</span></span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//            获得对象上传的策略,包括签名,文件信息,路径,</span></span><br><span class=\"line\">            map = minioClient.getPresignedPostFormData(postPolicy);</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;host&quot;</span>, minioConfiguration.getUrl() + <span class=\"string\">&quot;/&quot;</span> + minioConfiguration.getBucketName());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;请求文件上传策略失败!错误原因:[&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取上传文件的url</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> objectName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeUnit</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPolicyUrl</span><span class=\"params\">(String objectName, Method method, <span class=\"type\">int</span> time, TimeUnit timeUnit)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()</span><br><span class=\"line\">                    .method(method)</span><br><span class=\"line\">                    .bucket(minioConfiguration.getBucketName())</span><br><span class=\"line\">                    .object(objectName)</span><br><span class=\"line\">                    .expiry(time, timeUnit).build());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;获取上传url失败!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过文件名称获取url</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> objectName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeUnit</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUrl</span><span class=\"params\">(String objectName, <span class=\"type\">int</span> time, TimeUnit timeUnit)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            url = minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()</span><br><span class=\"line\">                    .method(Method.GET)</span><br><span class=\"line\">                    .bucket(minioConfiguration.getBucketName())</span><br><span class=\"line\">                    .object(objectName)</span><br><span class=\"line\">                    .expiry(time, timeUnit).build());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;根据文件名称获取文件url失败!,失败原因:[&#123;&#125;]&quot;</span>,e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;third-party/&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OssController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MinioClientPolicy minioClientPolicy;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得上传的url地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/uploadUrl&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R <span class=\"title function_\">uploadUrl</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;fileName&quot;)</span> String fileName)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> minioClientPolicy.getPolicyUrl(fileName, Method.PUT, <span class=\"number\">2</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.ok().put(<span class=\"string\">&quot;data&quot;</span>,url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个方法是获取上传策略，作用是获取令牌，</p>\n<p>另一个是获取上传url路径，有了令牌就需要，用户通过浏览器自己上传文件而不是服务器进行上传。</p>\n<p>最后返回的url地址，可以通过put请求进行上传文件。</p>\n<h1 id=\"前后端联调\"><a href=\"#前后端联调\" class=\"headerlink\" title=\"前后端联调\"></a>前后端联调</h1><h2 id=\"后端业务\"><a href=\"#后端业务\" class=\"headerlink\" title=\"后端业务\"></a>后端业务</h2><h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项:\"></a>注意事项:</h3><blockquote>\n<p>需要使用put请求,官方要求,get请求是获得文件的访问地址,post请求会报错.</p>\n</blockquote>\n<h2 id=\"前端业务\"><a href=\"#前端业务\" class=\"headerlink\" title=\"前端业务\"></a>前端业务</h2><h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><p>前端采取的是elementui 的el-upload组件,以及vue</p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-upload</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">action</span>=<span class=\"string\">&quot;https://jsonplder.typiposts/&quot;</span>\t\t#这里随便填写,我们不使用这个默认的上传方式</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">list-type</span>=<span class=\"string\">&quot;picture&quot;</span>\t\t</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:multiple</span>=<span class=\"string\">&quot;false&quot;</span>\t\t\t</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:show-file-list</span>=<span class=\"string\">&quot;showFileList&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:file-list</span>=<span class=\"string\">&quot;fileList&quot;</span>\t\t可以进行回显的文件列表</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:http-request</span>=<span class=\"string\">&quot;upload&quot;</span>\t\t#在这里就是定义使用自己的上传方法<span class=\"attr\">.upload</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:before-upload</span>=<span class=\"string\">&quot;beforeUpload&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:on-remove</span>=<span class=\"string\">&quot;handleRemove&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:on-success</span>=<span class=\"string\">&quot;handleUploadSuccess&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:on-preview</span>=<span class=\"string\">&quot;handlePreview&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span>&gt;</span>点击上传<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;tip&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;el-upload__tip&quot;</span>&gt;</span></span><br><span class=\"line\">        只能上传jpg/png文件，且不超过10MB</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文件上传之前的操作,在这前后端进行交互,获得minio的签名,后端会返回给前端,前端进行保存</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; file </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">beforeUpload</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(file);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ext = file.<span class=\"property\">name</span>.<span class=\"title function_\">substring</span>(file.<span class=\"property\">name</span>.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&quot;.&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ext);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> filename = <span class=\"title function_\">getUUID</span>() + <span class=\"string\">&quot;.&quot;</span> + ext;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fileName</span> = filename;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">http</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">url</span>: http.<span class=\"title function_\">adornUrl</span>(<span class=\"string\">&quot;/thirdparty/uploadUrl&quot;</span>),</span><br><span class=\"line\">          <span class=\"attr\">method</span>: <span class=\"string\">&quot;get&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">params</span>: &#123; <span class=\"attr\">fileName</span>: filename &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">            _self.<span class=\"property\">minioUrl</span> = response.<span class=\"property\">data</span>.<span class=\"property\">data</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">minioUrl</span>);</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 重写了文件上传,在这里上传文件,通过后端返回给我们的url地址.使用put进行上传.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; res </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; file </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"title function_\">upload</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> binFile = file.<span class=\"property\">file</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">http</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">url</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">minioUrl</span>,</span><br><span class=\"line\">          <span class=\"attr\">method</span>: <span class=\"string\">&quot;put&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">file</span>:binFile</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;文件上传成功&quot;</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;文件上传失败&quot;</span>);</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>三个步骤，</p>\n<ol>\n<li>获得令牌，上传文件</li>\n<li>通过令牌获取上传的url。</li>\n<li>用户通过返回的url进行上传文件</li>\n</ol>\n<h1 id=\"网关配置\"><a href=\"#网关配置\" class=\"headerlink\" title=\"网关配置\"></a>网关配置</h1><p>和前面差不多，基本上一致。</p>\n<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><h2 id=\"value获得不到数据\"><a href=\"#value获得不到数据\" class=\"headerlink\" title=\"@value获得不到数据\"></a>@value获得不到数据</h2><p>版本原因，需要降低版本，springcloud版本和主项目一致。</p>\n<h2 id=\"jar包冲突\"><a href=\"#jar包冲突\" class=\"headerlink\" title=\"jar包冲突\"></a>jar包冲突</h2><p><img src=\"https://s2.loli.net/2022/06/20/A397lFm5uYedDKG.png\"></p>\n<h3 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a><strong>原因：</strong></h3><p>根据上面的异常信息分析，可能是okhttp依赖冲突造成的服务启动失败，因为minio底层要依赖okhttp进行和minio服务端进行通信，由于项目中多个依赖底层都依赖了不同版本的okhttp，导致这里的okhttp因版本不同，某些方法不可用，尝试降级minio的版本，如下：最好排除掉版本中原来的okhttp。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.minio<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>minio<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.4.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.squareup.okhttp3<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>okhttp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>me.tongfei<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>progressbar<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.squareup.okhttp3<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>okhttp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前端上传不了数据一直报错\"><a href=\"#前端上传不了数据一直报错\" class=\"headerlink\" title=\"前端上传不了数据一直报错\"></a>前端上传不了数据一直报错</h2><h3 id=\"情况\"><a href=\"#情况\" class=\"headerlink\" title=\"情况:\"></a>情况:</h3><p>可以通过postman上传文件,但是就是不可以使用vue+element上传。</p>\n<h3 id=\"解决：重写默认的upload方法解决，使用put请求\"><a href=\"#解决：重写默认的upload方法解决，使用put请求\" class=\"headerlink\" title=\"解决：重写默认的upload方法解决，使用put请求\"></a>解决：重写默认的upload方法解决，使用put请求</h3><p>一开始使用的是别人封装好的包进行请求地址。也就是把file二进制文件放到了params进行put请求，最后还是分析postman和前端上传的不同发现的。以后遇到这样的问题一定要进行比较发现问题（postman、vue）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">http</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">url</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">minioUrl</span>,</span><br><span class=\"line\">          <span class=\"attr\">method</span>: <span class=\"string\">&quot;put&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">file</span>:binFile\t\t\t有问题不能使用data进行传参，这样会出现文件格式不正确的情况，需要使用binary格式上传\t\t使用<span class=\"attr\">date</span>: binFile</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;文件上传成功&quot;</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;文件上传失败&quot;</span>);</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"文件无法预览\"><a href=\"#文件无法预览\" class=\"headerlink\" title=\"文件无法预览\"></a>文件无法预览</h2><p>结局上传问题之后，还没有完全完成，现在的问题就是上传没有问题但是就是没有办法下载预览，也就是文件提示格式是错误的。</p>\n<h3 id=\"解决：\"><a href=\"#解决：\" class=\"headerlink\" title=\"解决：\"></a>解决：</h3><p>这个问题出现的原因是我使用的是data进行上传对象，这样写的是一个对象到文件中并不是一个二进制文件，这个文件包含了一些头信息之类的。</p>\n<p>只需要把上传的文件改成一个二进制文件,之前是一个对象</p>\n<p><strong>前后对比</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data</span>: binFile\t\t后</span><br><span class=\"line\"><span class=\"attr\">data</span>:&#123;<span class=\"attr\">file</span>:binFile&#125;\t\t前</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1653311918738-0c43e51fb962?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80","excerpt":"","more":"<p>[Toc]</p>\n<h1 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h1><p>用户请求上传文件，服务器处理这个请求，并且返回一个签名给到用户，用户通过这个签名来访问，文件存储系统，进行上传文件。文件存储系统的账号密码都是保存在自己服务器中的，比较的安全。</p>\n<p><img src=\"https://s2.loli.net/2022/06/20/mDvuMC3e7iBynNj.png\"></p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>minio使用指南</p>\n<p>使用一个新的maven项目来存放所有的第三方包。</p>\n<h2 id=\"加入到父项目项目中（聚合）\"><a href=\"#加入到父项目项目中（聚合）\" class=\"headerlink\" title=\"加入到父项目项目中（聚合）\"></a>加入到父项目项目中（聚合）</h2><h2 id=\"添加依赖包\"><a href=\"#添加依赖包\" class=\"headerlink\" title=\"添加依赖包\"></a>添加依赖包</h2><h3 id=\"还需要加入common，\"><a href=\"#还需要加入common，\" class=\"headerlink\" title=\"还需要加入common，\"></a>还需要加入common，</h3><h3 id=\"minio注意\"><a href=\"#minio注意\" class=\"headerlink\" title=\"minio注意\"></a>minio注意</h3><p>这里使用的是minio的依赖包，这里注意版本号的问题，需要排除okhttp版本</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.minio<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>minio<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.4.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.squareup.okhttp3<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>okhttp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>me.tongfei<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>progressbar<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.squareup.okhttp3<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>okhttp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"注册到nacos中，并且配置配置中心等信息\"><a href=\"#注册到nacos中，并且配置配置中心等信息\" class=\"headerlink\" title=\"注册到nacos中，并且配置配置中心等信息\"></a>注册到nacos中，并且配置配置中心等信息</h2><p>加入到minio中的配置信息</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#minio配置</span></span><br><span class=\"line\"><span class=\"attr\">minio:</span></span><br><span class=\"line\">  <span class=\"attr\">access-key:</span> <span class=\"string\">admin</span>      <span class=\"comment\">#key就是docker初始化是设置的，密钥相同</span></span><br><span class=\"line\">  <span class=\"attr\">secret-key:</span> <span class=\"string\">admin123456</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">http://120.55.125.132:9000</span></span><br><span class=\"line\">  <span class=\"attr\">bucket:</span> <span class=\"string\">gmall</span></span><br><span class=\"line\">  <span class=\"attr\">min:</span> <span class=\"number\">10</span><span class=\"string\">*1024</span>    <span class=\"comment\">#10kb</span></span><br><span class=\"line\">  <span class=\"attr\">max:</span> <span class=\"number\">10</span><span class=\"string\">*1024*1024</span>   <span class=\"comment\">#10MB</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用一个配置类获取配置\"><a href=\"#使用一个配置类获取配置\" class=\"headerlink\" title=\"使用一个配置类获取配置\"></a>使用一个配置类获取配置</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MinioConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;minio.access-key&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String accessKey;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;minio.secret-key&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String secretKey;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;minio.url&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;minio.bucket&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bucketName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MinioClient <span class=\"title function_\">minioClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MinioClient.builder()</span><br><span class=\"line\">                .endpoint(url)</span><br><span class=\"line\">                .credentials(accessKey, secretKey)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"业务逻辑方面\"><a href=\"#业务逻辑方面\" class=\"headerlink\" title=\"业务逻辑方面\"></a>业务逻辑方面</h2><h3 id=\"service服务\"><a href=\"#service服务\" class=\"headerlink\" title=\"service服务\"></a>service服务</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MinioClientPolicy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MinioConfiguration minioConfiguration;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MinioClient minioClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;minio.min&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String min;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;minio.max&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String max;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户获得上传签名</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileName 上传文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time     过期时间,指定</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">getPolicy</span><span class=\"params\">(String fileName, ZonedDateTime time)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        给储存桶创建一个上传策略,过期时间是time</span></span><br><span class=\"line\">        <span class=\"type\">PostPolicy</span> <span class=\"variable\">postPolicy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PostPolicy</span>(minioConfiguration.getBucketName(), time);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        设置一个参数key,值为上传对象的名称</span></span><br><span class=\"line\">        postPolicy.addEqualsCondition(<span class=\"string\">&quot;key&quot;</span>, fileName);</span><br><span class=\"line\"><span class=\"comment\">//        设置content-type,表示只能上传图片</span></span><br><span class=\"line\">        postPolicy.addStartsWithCondition(<span class=\"string\">&quot;Content-type&quot;</span>, <span class=\"string\">&quot;image/&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//        postPolicy.addContentLengthRangeCondition(Integer.valueOf(min), Integer.valueOf(max));</span></span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//            获得对象上传的策略,包括签名,文件信息,路径,</span></span><br><span class=\"line\">            map = minioClient.getPresignedPostFormData(postPolicy);</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;host&quot;</span>, minioConfiguration.getUrl() + <span class=\"string\">&quot;/&quot;</span> + minioConfiguration.getBucketName());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;请求文件上传策略失败!错误原因:[&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取上传文件的url</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> objectName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> method</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeUnit</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPolicyUrl</span><span class=\"params\">(String objectName, Method method, <span class=\"type\">int</span> time, TimeUnit timeUnit)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()</span><br><span class=\"line\">                    .method(method)</span><br><span class=\"line\">                    .bucket(minioConfiguration.getBucketName())</span><br><span class=\"line\">                    .object(objectName)</span><br><span class=\"line\">                    .expiry(time, timeUnit).build());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;获取上传url失败!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过文件名称获取url</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> objectName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> time</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> timeUnit</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUrl</span><span class=\"params\">(String objectName, <span class=\"type\">int</span> time, TimeUnit timeUnit)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            url = minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()</span><br><span class=\"line\">                    .method(Method.GET)</span><br><span class=\"line\">                    .bucket(minioConfiguration.getBucketName())</span><br><span class=\"line\">                    .object(objectName)</span><br><span class=\"line\">                    .expiry(time, timeUnit).build());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;根据文件名称获取文件url失败!,失败原因:[&#123;&#125;]&quot;</span>,e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;third-party/&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OssController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MinioClientPolicy minioClientPolicy;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获得上传的url地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/uploadUrl&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> R <span class=\"title function_\">uploadUrl</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;fileName&quot;)</span> String fileName)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> minioClientPolicy.getPolicyUrl(fileName, Method.PUT, <span class=\"number\">2</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.ok().put(<span class=\"string\">&quot;data&quot;</span>,url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个方法是获取上传策略，作用是获取令牌，</p>\n<p>另一个是获取上传url路径，有了令牌就需要，用户通过浏览器自己上传文件而不是服务器进行上传。</p>\n<p>最后返回的url地址，可以通过put请求进行上传文件。</p>\n<h1 id=\"前后端联调\"><a href=\"#前后端联调\" class=\"headerlink\" title=\"前后端联调\"></a>前后端联调</h1><h2 id=\"后端业务\"><a href=\"#后端业务\" class=\"headerlink\" title=\"后端业务\"></a>后端业务</h2><h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项:\"></a>注意事项:</h3><blockquote>\n<p>需要使用put请求,官方要求,get请求是获得文件的访问地址,post请求会报错.</p>\n</blockquote>\n<h2 id=\"前端业务\"><a href=\"#前端业务\" class=\"headerlink\" title=\"前端业务\"></a>前端业务</h2><h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><p>前端采取的是elementui 的el-upload组件,以及vue</p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-upload</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">action</span>=<span class=\"string\">&quot;https://jsonplder.typiposts/&quot;</span>\t\t#这里随便填写,我们不使用这个默认的上传方式</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">list-type</span>=<span class=\"string\">&quot;picture&quot;</span>\t\t</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:multiple</span>=<span class=\"string\">&quot;false&quot;</span>\t\t\t</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:show-file-list</span>=<span class=\"string\">&quot;showFileList&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:file-list</span>=<span class=\"string\">&quot;fileList&quot;</span>\t\t可以进行回显的文件列表</span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:http-request</span>=<span class=\"string\">&quot;upload&quot;</span>\t\t#在这里就是定义使用自己的上传方法<span class=\"attr\">.upload</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:before-upload</span>=<span class=\"string\">&quot;beforeUpload&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:on-remove</span>=<span class=\"string\">&quot;handleRemove&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:on-success</span>=<span class=\"string\">&quot;handleUploadSuccess&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:on-preview</span>=<span class=\"string\">&quot;handlePreview&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span>&gt;</span>点击上传<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;tip&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;el-upload__tip&quot;</span>&gt;</span></span><br><span class=\"line\">        只能上传jpg/png文件，且不超过10MB</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 文件上传之前的操作,在这前后端进行交互,获得minio的签名,后端会返回给前端,前端进行保存</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; file </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title function_\">beforeUpload</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> _self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(file);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ext = file.<span class=\"property\">name</span>.<span class=\"title function_\">substring</span>(file.<span class=\"property\">name</span>.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&quot;.&quot;</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ext);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> filename = <span class=\"title function_\">getUUID</span>() + <span class=\"string\">&quot;.&quot;</span> + ext;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">fileName</span> = filename;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">http</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">url</span>: http.<span class=\"title function_\">adornUrl</span>(<span class=\"string\">&quot;/thirdparty/uploadUrl&quot;</span>),</span><br><span class=\"line\">          <span class=\"attr\">method</span>: <span class=\"string\">&quot;get&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">params</span>: &#123; <span class=\"attr\">fileName</span>: filename &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span><br><span class=\"line\">            _self.<span class=\"property\">minioUrl</span> = response.<span class=\"property\">data</span>.<span class=\"property\">data</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">minioUrl</span>);</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 重写了文件上传,在这里上传文件,通过后端返回给我们的url地址.使用put进行上传.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; res </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; file </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"title function_\">upload</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> binFile = file.<span class=\"property\">file</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">http</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">url</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">minioUrl</span>,</span><br><span class=\"line\">          <span class=\"attr\">method</span>: <span class=\"string\">&quot;put&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">file</span>:binFile</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;文件上传成功&quot;</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;文件上传失败&quot;</span>);</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>三个步骤，</p>\n<ol>\n<li>获得令牌，上传文件</li>\n<li>通过令牌获取上传的url。</li>\n<li>用户通过返回的url进行上传文件</li>\n</ol>\n<h1 id=\"网关配置\"><a href=\"#网关配置\" class=\"headerlink\" title=\"网关配置\"></a>网关配置</h1><p>和前面差不多，基本上一致。</p>\n<h1 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h1><h2 id=\"value获得不到数据\"><a href=\"#value获得不到数据\" class=\"headerlink\" title=\"@value获得不到数据\"></a>@value获得不到数据</h2><p>版本原因，需要降低版本，springcloud版本和主项目一致。</p>\n<h2 id=\"jar包冲突\"><a href=\"#jar包冲突\" class=\"headerlink\" title=\"jar包冲突\"></a>jar包冲突</h2><p><img src=\"https://s2.loli.net/2022/06/20/A397lFm5uYedDKG.png\"></p>\n<h3 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a><strong>原因：</strong></h3><p>根据上面的异常信息分析，可能是okhttp依赖冲突造成的服务启动失败，因为minio底层要依赖okhttp进行和minio服务端进行通信，由于项目中多个依赖底层都依赖了不同版本的okhttp，导致这里的okhttp因版本不同，某些方法不可用，尝试降级minio的版本，如下：最好排除掉版本中原来的okhttp。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.minio<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>minio<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.4.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.squareup.okhttp3<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>okhttp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>me.tongfei<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>progressbar<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.5.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.squareup.okhttp3<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>okhttp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前端上传不了数据一直报错\"><a href=\"#前端上传不了数据一直报错\" class=\"headerlink\" title=\"前端上传不了数据一直报错\"></a>前端上传不了数据一直报错</h2><h3 id=\"情况\"><a href=\"#情况\" class=\"headerlink\" title=\"情况:\"></a>情况:</h3><p>可以通过postman上传文件,但是就是不可以使用vue+element上传。</p>\n<h3 id=\"解决：重写默认的upload方法解决，使用put请求\"><a href=\"#解决：重写默认的upload方法解决，使用put请求\" class=\"headerlink\" title=\"解决：重写默认的upload方法解决，使用put请求\"></a>解决：重写默认的upload方法解决，使用put请求</h3><p>一开始使用的是别人封装好的包进行请求地址。也就是把file二进制文件放到了params进行put请求，最后还是分析postman和前端上传的不同发现的。以后遇到这样的问题一定要进行比较发现问题（postman、vue）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">http</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">url</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">minioUrl</span>,</span><br><span class=\"line\">          <span class=\"attr\">method</span>: <span class=\"string\">&quot;put&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">file</span>:binFile\t\t\t有问题不能使用data进行传参，这样会出现文件格式不正确的情况，需要使用binary格式上传\t\t使用<span class=\"attr\">date</span>: binFile</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;文件上传成功&quot;</span>);</span><br><span class=\"line\">          <span class=\"title function_\">resolve</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;文件上传失败&quot;</span>);</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"文件无法预览\"><a href=\"#文件无法预览\" class=\"headerlink\" title=\"文件无法预览\"></a>文件无法预览</h2><p>结局上传问题之后，还没有完全完成，现在的问题就是上传没有问题但是就是没有办法下载预览，也就是文件提示格式是错误的。</p>\n<h3 id=\"解决：\"><a href=\"#解决：\" class=\"headerlink\" title=\"解决：\"></a>解决：</h3><p>这个问题出现的原因是我使用的是data进行上传对象，这样写的是一个对象到文件中并不是一个二进制文件，这个文件包含了一些头信息之类的。</p>\n<p>只需要把上传的文件改成一个二进制文件,之前是一个对象</p>\n<p><strong>前后对比</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">data</span>: binFile\t\t后</span><br><span class=\"line\"><span class=\"attr\">data</span>:&#123;<span class=\"attr\">file</span>:binFile&#125;\t\t前</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"注解使用，空不返回","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"使用@jsonInclude\n\n使用的属性value，\n\n可以是：non_empty,always\n\n\n\n","source":"_posts/gmall文档/注解使用，空不返回.md","raw":"title: 注解使用，空不返回\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n使用@jsonInclude\n\n使用的属性value，\n\n可以是：non_empty,always\n\n\n\n","slug":"gmall文档/注解使用，空不返回","published":1,"updated":"2022-07-02T08:37:06.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x4d000sb6qf3bjz6dv5","content":"<p>使用@jsonInclude</p>\n<p>使用的属性value，</p>\n<p>可以是：non_empty,always</p>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1653450283256-a4df3d86ba65?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=386&q=80","excerpt":"","more":"<p>使用@jsonInclude</p>\n<p>使用的属性value，</p>\n<p>可以是：non_empty,always</p>\n"},{"title":"网关解决跨域","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"# 最开始没有使用网关进行转发\n\n最开始时候前端都是使用对应服务的绝对地址进行访问的。\n\n## 开始改造\n\nvue的baseurl改成网关地址，并且添加/api，这个/api为了网关好进行判断这个是请求，进行跨域访问。\n\n一般baseurl在main.js中\n\n```js\nbaseUrl=\"http://192.168.1.106:10616/api\";\t\t//这个192.168.1.106:10616是网关地址\n//后面具体的接口还会拼接一些接口\n```\n\n这样前端请求的地址都变成了网关的地址，网关需要进行处理转发。既然你需要网关发送，那么服务一定要在nacos中注册。\n\n## 服务注册\n\n1、如果服务没有注册，需要注册到nacos中（不需要使用namespace），并且添加配置中心（这里最好添加上namespace）。\n\n```yml\n# Spring\nspring:\n  application:\n    # 应用名称\n    name: gmall-gateway\n  cloud:\n    nacos:\n      discovery:\n        # 服务注册地址\n        server-addr: 127.0.0.1:8848\n      config:\n        # 配置中心地址\n        server-addr: 127.0.0.1:8848\n        namespace: c991b9c0-b4d0-4057-b5fa-29450a81d75b\n```\n\n\n\n2、配置完成不要忘了在启动类添加一个注解`@EnableDiscoveryClient`。\n\n## 配置网关路由\n\n1. 现在配置的只是服务的注册以及配置，需要网关发挥路由的作用还需要进行路由配置。\n2. 并且配置的访问地址是携带api的，在真实的请求中我们是不需要`api`这个字段的。\n\n\n\n针对上述问题，解决方法是在application.yml文件中配置如下：（配置路由需要注意的是）\n\n> 注意这个文件已经将配置了两个路径，精确的路由放到上面，gateway是自上往下执行匹配的。\n\n```yml\nspring:\n  cloud:\n    gateway:\n      routes:\n#          精确的路由放上面\n        - id: product_route\n          uri: lb://gmall-product\t\t#lb是进行负载均衡\n          predicates:\t\t#路由匹配规则只有符合要求的才可以使用这个规则\n            - Path=/api/product/**\t\t\n          filters:\t\t#解决上述2问题，路由配置问题，需要对路由进行重写\n            - RewritePath=/api/(?<segment>.*),/$\\{segment}\n\n        - id: admin_route\n          uri: lb://renren-fast\n          predicates:\n            - Path=/api/**\n          filters:\n            - RewritePath=/api/(?<segment>.*),/renren-fast/$\\{segment}\n```\n\n### `RewritePath=/api/(?<segment>.*),/$\\{segment}`\n\n`(?<segment>.*)`：表示将后面`.*`匹配到的内容捕获到segment中，相当于替换\n\n`$\\{segment}`：分组捕获进行替换\n\n之所以使用`\\`是因为避免yaml语法认为这是一个变量，`${name}`这个就是一个变量.\n\n\n\n### 总结\n\n`predicates` 进行==拦截==\n\n`filters` ： 进行==路径重写==等操作\n\n\n\n常常会遇到跨站访问（跨域）的问题。\n\n可以通过nginx来解决，还可以通过网关来解决。配置好路由规则就可以跳转相应的地址。\n\n\n\n# 跨域问题解决\n\n正常的情况这个时候访问接口，应该是没有问题的。但是访问接口的时候发生了跨域问题。\n\n**原因**：cors头缺少‘access-control-allow-origin’\n\n1. 解决方法一：通过nginx来解决\n2. 解决二，服务器请求允许跨域请求（添加headers，methods·····）\n\n\n\n## 后端添加过滤器允许跨站访问\n\n```java\n@Configuration\npublic class myCorsConfigration {\n\n    //使用corswebfilter来做跨域,这个是一个接口,所以,找到一个具体的实现类(UrlBasedCorsConfigurationSource)\n    @Bean\n    public CorsWebFilter corsWebFilter(){\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        //创建跨域配置\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n\n        corsConfiguration.addAllowedHeader(\"*\");\n        corsConfiguration.addAllowedMethod(\"*\");    //请求方式\n        corsConfiguration.addAllowedOrigin(\"*\");        //请求来源\n        corsConfiguration.setAllowCredentials(true);\n//        所有路径都需要跨域，这个注册需要配置，创建配置添加允许跨域请求头\n        source.registerCorsConfiguration(\"/**\",corsConfiguration);\n        return new CorsWebFilter(source);\n    }\n\n}\n```\n\n> 注意这些cors包引入的都是reactive包下的，spring是响应式的。\n\n\n\n# 问题注意\n\n## 网关转发需要在一个命名空间下（public）\n\n在服务注册的时候，不要分命名空间，命名空间只是在配置中心的时候在使用到的。\n\n## 出现了多个跨域请求\n\n也就是一个项目中配置了两次跨站允许请求头，解决去掉一处的配置。\n","source":"_posts/gmall文档/网关解决跨域.md","raw":"title: 网关解决跨域\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n# 最开始没有使用网关进行转发\n\n最开始时候前端都是使用对应服务的绝对地址进行访问的。\n\n## 开始改造\n\nvue的baseurl改成网关地址，并且添加/api，这个/api为了网关好进行判断这个是请求，进行跨域访问。\n\n一般baseurl在main.js中\n\n```js\nbaseUrl=\"http://192.168.1.106:10616/api\";\t\t//这个192.168.1.106:10616是网关地址\n//后面具体的接口还会拼接一些接口\n```\n\n这样前端请求的地址都变成了网关的地址，网关需要进行处理转发。既然你需要网关发送，那么服务一定要在nacos中注册。\n\n## 服务注册\n\n1、如果服务没有注册，需要注册到nacos中（不需要使用namespace），并且添加配置中心（这里最好添加上namespace）。\n\n```yml\n# Spring\nspring:\n  application:\n    # 应用名称\n    name: gmall-gateway\n  cloud:\n    nacos:\n      discovery:\n        # 服务注册地址\n        server-addr: 127.0.0.1:8848\n      config:\n        # 配置中心地址\n        server-addr: 127.0.0.1:8848\n        namespace: c991b9c0-b4d0-4057-b5fa-29450a81d75b\n```\n\n\n\n2、配置完成不要忘了在启动类添加一个注解`@EnableDiscoveryClient`。\n\n## 配置网关路由\n\n1. 现在配置的只是服务的注册以及配置，需要网关发挥路由的作用还需要进行路由配置。\n2. 并且配置的访问地址是携带api的，在真实的请求中我们是不需要`api`这个字段的。\n\n\n\n针对上述问题，解决方法是在application.yml文件中配置如下：（配置路由需要注意的是）\n\n> 注意这个文件已经将配置了两个路径，精确的路由放到上面，gateway是自上往下执行匹配的。\n\n```yml\nspring:\n  cloud:\n    gateway:\n      routes:\n#          精确的路由放上面\n        - id: product_route\n          uri: lb://gmall-product\t\t#lb是进行负载均衡\n          predicates:\t\t#路由匹配规则只有符合要求的才可以使用这个规则\n            - Path=/api/product/**\t\t\n          filters:\t\t#解决上述2问题，路由配置问题，需要对路由进行重写\n            - RewritePath=/api/(?<segment>.*),/$\\{segment}\n\n        - id: admin_route\n          uri: lb://renren-fast\n          predicates:\n            - Path=/api/**\n          filters:\n            - RewritePath=/api/(?<segment>.*),/renren-fast/$\\{segment}\n```\n\n### `RewritePath=/api/(?<segment>.*),/$\\{segment}`\n\n`(?<segment>.*)`：表示将后面`.*`匹配到的内容捕获到segment中，相当于替换\n\n`$\\{segment}`：分组捕获进行替换\n\n之所以使用`\\`是因为避免yaml语法认为这是一个变量，`${name}`这个就是一个变量.\n\n\n\n### 总结\n\n`predicates` 进行==拦截==\n\n`filters` ： 进行==路径重写==等操作\n\n\n\n常常会遇到跨站访问（跨域）的问题。\n\n可以通过nginx来解决，还可以通过网关来解决。配置好路由规则就可以跳转相应的地址。\n\n\n\n# 跨域问题解决\n\n正常的情况这个时候访问接口，应该是没有问题的。但是访问接口的时候发生了跨域问题。\n\n**原因**：cors头缺少‘access-control-allow-origin’\n\n1. 解决方法一：通过nginx来解决\n2. 解决二，服务器请求允许跨域请求（添加headers，methods·····）\n\n\n\n## 后端添加过滤器允许跨站访问\n\n```java\n@Configuration\npublic class myCorsConfigration {\n\n    //使用corswebfilter来做跨域,这个是一个接口,所以,找到一个具体的实现类(UrlBasedCorsConfigurationSource)\n    @Bean\n    public CorsWebFilter corsWebFilter(){\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        //创建跨域配置\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\n\n        corsConfiguration.addAllowedHeader(\"*\");\n        corsConfiguration.addAllowedMethod(\"*\");    //请求方式\n        corsConfiguration.addAllowedOrigin(\"*\");        //请求来源\n        corsConfiguration.setAllowCredentials(true);\n//        所有路径都需要跨域，这个注册需要配置，创建配置添加允许跨域请求头\n        source.registerCorsConfiguration(\"/**\",corsConfiguration);\n        return new CorsWebFilter(source);\n    }\n\n}\n```\n\n> 注意这些cors包引入的都是reactive包下的，spring是响应式的。\n\n\n\n# 问题注意\n\n## 网关转发需要在一个命名空间下（public）\n\n在服务注册的时候，不要分命名空间，命名空间只是在配置中心的时候在使用到的。\n\n## 出现了多个跨域请求\n\n也就是一个项目中配置了两次跨站允许请求头，解决去掉一处的配置。\n","slug":"gmall文档/网关解决跨域","published":1,"updated":"2022-07-02T08:37:06.405Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x4f000wb6qfgut41lkz","content":"<h1 id=\"最开始没有使用网关进行转发\"><a href=\"#最开始没有使用网关进行转发\" class=\"headerlink\" title=\"最开始没有使用网关进行转发\"></a>最开始没有使用网关进行转发</h1><p>最开始时候前端都是使用对应服务的绝对地址进行访问的。</p>\n<h2 id=\"开始改造\"><a href=\"#开始改造\" class=\"headerlink\" title=\"开始改造\"></a>开始改造</h2><p>vue的baseurl改成网关地址，并且添加/api，这个/api为了网关好进行判断这个是请求，进行跨域访问。</p>\n<p>一般baseurl在main.js中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">baseUrl=<span class=\"string\">&quot;http://192.168.1.106:10616/api&quot;</span>;\t\t<span class=\"comment\">//这个192.168.1.106:10616是网关地址</span></span><br><span class=\"line\"><span class=\"comment\">//后面具体的接口还会拼接一些接口</span></span><br></pre></td></tr></table></figure>\n\n<p>这样前端请求的地址都变成了网关的地址，网关需要进行处理转发。既然你需要网关发送，那么服务一定要在nacos中注册。</p>\n<h2 id=\"服务注册\"><a href=\"#服务注册\" class=\"headerlink\" title=\"服务注册\"></a>服务注册</h2><p>1、如果服务没有注册，需要注册到nacos中（不需要使用namespace），并且添加配置中心（这里最好添加上namespace）。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Spring</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"comment\"># 应用名称</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">gmall-gateway</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"comment\"># 服务注册地址</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"comment\"># 配置中心地址</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">c991b9c0-b4d0-4057-b5fa-29450a81d75b</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、配置完成不要忘了在启动类添加一个注解<code>@EnableDiscoveryClient</code>。</p>\n<h2 id=\"配置网关路由\"><a href=\"#配置网关路由\" class=\"headerlink\" title=\"配置网关路由\"></a>配置网关路由</h2><ol>\n<li>现在配置的只是服务的注册以及配置，需要网关发挥路由的作用还需要进行路由配置。</li>\n<li>并且配置的访问地址是携带api的，在真实的请求中我们是不需要<code>api</code>这个字段的。</li>\n</ol>\n<p>针对上述问题，解决方法是在application.yml文件中配置如下：（配置路由需要注意的是）</p>\n<blockquote>\n<p>注意这个文件已经将配置了两个路径，精确的路由放到上面，gateway是自上往下执行匹配的。</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\"><span class=\"comment\">#          精确的路由放上面</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">product_route</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://gmall-product</span>\t\t<span class=\"comment\">#lb是进行负载均衡</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span>\t\t<span class=\"comment\">#路由匹配规则只有符合要求的才可以使用这个规则</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/api/product/**</span>\t\t</span><br><span class=\"line\">          <span class=\"attr\">filters:</span>\t\t<span class=\"comment\">#解决上述2问题，路由配置问题，需要对路由进行重写</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">RewritePath=/api/(?&lt;segment&gt;.*),/$\\&#123;segment&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">admin_route</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://renren-fast</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/api/**</span></span><br><span class=\"line\">          <span class=\"attr\">filters:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RewritePath-api-lt-segment-gt-segment\"><a href=\"#RewritePath-api-lt-segment-gt-segment\" class=\"headerlink\" title=\"RewritePath=/api/(?&lt;segment&gt;.*),/$\\{segment}\"></a><code>RewritePath=/api/(?&lt;segment&gt;.*),/$\\&#123;segment&#125;</code></h3><p><code>(?&lt;segment&gt;.*)</code>：表示将后面<code>.*</code>匹配到的内容捕获到segment中，相当于替换</p>\n<p><code>$\\&#123;segment&#125;</code>：分组捕获进行替换</p>\n<p>之所以使用<code>\\</code>是因为避免yaml语法认为这是一个变量，<code>$&#123;name&#125;</code>这个就是一个变量.</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>predicates</code> 进行==拦截==</p>\n<p><code>filters</code> ： 进行==路径重写==等操作</p>\n<p>常常会遇到跨站访问（跨域）的问题。</p>\n<p>可以通过nginx来解决，还可以通过网关来解决。配置好路由规则就可以跳转相应的地址。</p>\n<h1 id=\"跨域问题解决\"><a href=\"#跨域问题解决\" class=\"headerlink\" title=\"跨域问题解决\"></a>跨域问题解决</h1><p>正常的情况这个时候访问接口，应该是没有问题的。但是访问接口的时候发生了跨域问题。</p>\n<p><strong>原因</strong>：cors头缺少‘access-control-allow-origin’</p>\n<ol>\n<li>解决方法一：通过nginx来解决</li>\n<li>解决二，服务器请求允许跨域请求（添加headers，methods·····）</li>\n</ol>\n<h2 id=\"后端添加过滤器允许跨站访问\"><a href=\"#后端添加过滤器允许跨站访问\" class=\"headerlink\" title=\"后端添加过滤器允许跨站访问\"></a>后端添加过滤器允许跨站访问</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">myCorsConfigration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用corswebfilter来做跨域,这个是一个接口,所以,找到一个具体的实现类(UrlBasedCorsConfigurationSource)</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CorsWebFilter <span class=\"title function_\">corsWebFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">UrlBasedCorsConfigurationSource</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlBasedCorsConfigurationSource</span>();</span><br><span class=\"line\">        <span class=\"comment\">//创建跨域配置</span></span><br><span class=\"line\">        <span class=\"type\">CorsConfiguration</span> <span class=\"variable\">corsConfiguration</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CorsConfiguration</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        corsConfiguration.addAllowedHeader(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        corsConfiguration.addAllowedMethod(<span class=\"string\">&quot;*&quot;</span>);    <span class=\"comment\">//请求方式</span></span><br><span class=\"line\">        corsConfiguration.addAllowedOrigin(<span class=\"string\">&quot;*&quot;</span>);        <span class=\"comment\">//请求来源</span></span><br><span class=\"line\">        corsConfiguration.setAllowCredentials(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//        所有路径都需要跨域，这个注册需要配置，创建配置添加允许跨域请求头</span></span><br><span class=\"line\">        source.registerCorsConfiguration(<span class=\"string\">&quot;/**&quot;</span>,corsConfiguration);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CorsWebFilter</span>(source);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意这些cors包引入的都是reactive包下的，spring是响应式的。</p>\n</blockquote>\n<h1 id=\"问题注意\"><a href=\"#问题注意\" class=\"headerlink\" title=\"问题注意\"></a>问题注意</h1><h2 id=\"网关转发需要在一个命名空间下（public）\"><a href=\"#网关转发需要在一个命名空间下（public）\" class=\"headerlink\" title=\"网关转发需要在一个命名空间下（public）\"></a>网关转发需要在一个命名空间下（public）</h2><p>在服务注册的时候，不要分命名空间，命名空间只是在配置中心的时候在使用到的。</p>\n<h2 id=\"出现了多个跨域请求\"><a href=\"#出现了多个跨域请求\" class=\"headerlink\" title=\"出现了多个跨域请求\"></a>出现了多个跨域请求</h2><p>也就是一个项目中配置了两次跨站允许请求头，解决去掉一处的配置。</p>\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1653046641850-f8d2222ac839?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80","excerpt":"","more":"<h1 id=\"最开始没有使用网关进行转发\"><a href=\"#最开始没有使用网关进行转发\" class=\"headerlink\" title=\"最开始没有使用网关进行转发\"></a>最开始没有使用网关进行转发</h1><p>最开始时候前端都是使用对应服务的绝对地址进行访问的。</p>\n<h2 id=\"开始改造\"><a href=\"#开始改造\" class=\"headerlink\" title=\"开始改造\"></a>开始改造</h2><p>vue的baseurl改成网关地址，并且添加/api，这个/api为了网关好进行判断这个是请求，进行跨域访问。</p>\n<p>一般baseurl在main.js中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">baseUrl=<span class=\"string\">&quot;http://192.168.1.106:10616/api&quot;</span>;\t\t<span class=\"comment\">//这个192.168.1.106:10616是网关地址</span></span><br><span class=\"line\"><span class=\"comment\">//后面具体的接口还会拼接一些接口</span></span><br></pre></td></tr></table></figure>\n\n<p>这样前端请求的地址都变成了网关的地址，网关需要进行处理转发。既然你需要网关发送，那么服务一定要在nacos中注册。</p>\n<h2 id=\"服务注册\"><a href=\"#服务注册\" class=\"headerlink\" title=\"服务注册\"></a>服务注册</h2><p>1、如果服务没有注册，需要注册到nacos中（不需要使用namespace），并且添加配置中心（这里最好添加上namespace）。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Spring</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"comment\"># 应用名称</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">gmall-gateway</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"comment\"># 服务注册地址</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"comment\"># 配置中心地址</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">c991b9c0-b4d0-4057-b5fa-29450a81d75b</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、配置完成不要忘了在启动类添加一个注解<code>@EnableDiscoveryClient</code>。</p>\n<h2 id=\"配置网关路由\"><a href=\"#配置网关路由\" class=\"headerlink\" title=\"配置网关路由\"></a>配置网关路由</h2><ol>\n<li>现在配置的只是服务的注册以及配置，需要网关发挥路由的作用还需要进行路由配置。</li>\n<li>并且配置的访问地址是携带api的，在真实的请求中我们是不需要<code>api</code>这个字段的。</li>\n</ol>\n<p>针对上述问题，解决方法是在application.yml文件中配置如下：（配置路由需要注意的是）</p>\n<blockquote>\n<p>注意这个文件已经将配置了两个路径，精确的路由放到上面，gateway是自上往下执行匹配的。</p>\n</blockquote>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\"><span class=\"comment\">#          精确的路由放上面</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">product_route</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://gmall-product</span>\t\t<span class=\"comment\">#lb是进行负载均衡</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span>\t\t<span class=\"comment\">#路由匹配规则只有符合要求的才可以使用这个规则</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/api/product/**</span>\t\t</span><br><span class=\"line\">          <span class=\"attr\">filters:</span>\t\t<span class=\"comment\">#解决上述2问题，路由配置问题，需要对路由进行重写</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">RewritePath=/api/(?&lt;segment&gt;.*),/$\\&#123;segment&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">admin_route</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://renren-fast</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/api/**</span></span><br><span class=\"line\">          <span class=\"attr\">filters:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RewritePath-api-lt-segment-gt-segment\"><a href=\"#RewritePath-api-lt-segment-gt-segment\" class=\"headerlink\" title=\"RewritePath=/api/(?&lt;segment&gt;.*),/$\\{segment}\"></a><code>RewritePath=/api/(?&lt;segment&gt;.*),/$\\&#123;segment&#125;</code></h3><p><code>(?&lt;segment&gt;.*)</code>：表示将后面<code>.*</code>匹配到的内容捕获到segment中，相当于替换</p>\n<p><code>$\\&#123;segment&#125;</code>：分组捕获进行替换</p>\n<p>之所以使用<code>\\</code>是因为避免yaml语法认为这是一个变量，<code>$&#123;name&#125;</code>这个就是一个变量.</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>predicates</code> 进行==拦截==</p>\n<p><code>filters</code> ： 进行==路径重写==等操作</p>\n<p>常常会遇到跨站访问（跨域）的问题。</p>\n<p>可以通过nginx来解决，还可以通过网关来解决。配置好路由规则就可以跳转相应的地址。</p>\n<h1 id=\"跨域问题解决\"><a href=\"#跨域问题解决\" class=\"headerlink\" title=\"跨域问题解决\"></a>跨域问题解决</h1><p>正常的情况这个时候访问接口，应该是没有问题的。但是访问接口的时候发生了跨域问题。</p>\n<p><strong>原因</strong>：cors头缺少‘access-control-allow-origin’</p>\n<ol>\n<li>解决方法一：通过nginx来解决</li>\n<li>解决二，服务器请求允许跨域请求（添加headers，methods·····）</li>\n</ol>\n<h2 id=\"后端添加过滤器允许跨站访问\"><a href=\"#后端添加过滤器允许跨站访问\" class=\"headerlink\" title=\"后端添加过滤器允许跨站访问\"></a>后端添加过滤器允许跨站访问</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">myCorsConfigration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用corswebfilter来做跨域,这个是一个接口,所以,找到一个具体的实现类(UrlBasedCorsConfigurationSource)</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CorsWebFilter <span class=\"title function_\">corsWebFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">UrlBasedCorsConfigurationSource</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlBasedCorsConfigurationSource</span>();</span><br><span class=\"line\">        <span class=\"comment\">//创建跨域配置</span></span><br><span class=\"line\">        <span class=\"type\">CorsConfiguration</span> <span class=\"variable\">corsConfiguration</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CorsConfiguration</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        corsConfiguration.addAllowedHeader(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">        corsConfiguration.addAllowedMethod(<span class=\"string\">&quot;*&quot;</span>);    <span class=\"comment\">//请求方式</span></span><br><span class=\"line\">        corsConfiguration.addAllowedOrigin(<span class=\"string\">&quot;*&quot;</span>);        <span class=\"comment\">//请求来源</span></span><br><span class=\"line\">        corsConfiguration.setAllowCredentials(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//        所有路径都需要跨域，这个注册需要配置，创建配置添加允许跨域请求头</span></span><br><span class=\"line\">        source.registerCorsConfiguration(<span class=\"string\">&quot;/**&quot;</span>,corsConfiguration);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CorsWebFilter</span>(source);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意这些cors包引入的都是reactive包下的，spring是响应式的。</p>\n</blockquote>\n<h1 id=\"问题注意\"><a href=\"#问题注意\" class=\"headerlink\" title=\"问题注意\"></a>问题注意</h1><h2 id=\"网关转发需要在一个命名空间下（public）\"><a href=\"#网关转发需要在一个命名空间下（public）\" class=\"headerlink\" title=\"网关转发需要在一个命名空间下（public）\"></a>网关转发需要在一个命名空间下（public）</h2><p>在服务注册的时候，不要分命名空间，命名空间只是在配置中心的时候在使用到的。</p>\n<h2 id=\"出现了多个跨域请求\"><a href=\"#出现了多个跨域请求\" class=\"headerlink\" title=\"出现了多个跨域请求\"></a>出现了多个跨域请求</h2><p>也就是一个项目中配置了两次跨站允许请求头，解决去掉一处的配置。</p>\n"},{"title":"springCloud认证中心搭建","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"---\ntitle: springCloud认证中心搭建\ncomments: true\ncopyright: true\ncopyright_author: wuy\ncopyright_author_href: 'https://xxxxxx.com'\ncopyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者\ndate: 2022-06-27 21:12:59\ntags: \n - springCloud\ncategories: \n  - springCloud \nkeywords:\ndescription:\ntop_img:\ncover: https://spring.io/images/spring-logo-9146a4d3298760c2e7e49595184e1975.svg\ntoc:\ntoc_number:\ntoc_style_simple:\nkatex:\naplayer:\nhighlight_shrink:\n---\n\n# \n\n# 认证中心\n","source":"_posts/springCloud/springCloud认证中心搭建.md","raw":"title: springCloud认证中心搭建\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n---\ntitle: springCloud认证中心搭建\ncomments: true\ncopyright: true\ncopyright_author: wuy\ncopyright_author_href: 'https://xxxxxx.com'\ncopyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者\ndate: 2022-06-27 21:12:59\ntags: \n - springCloud\ncategories: \n  - springCloud \nkeywords:\ndescription:\ntop_img:\ncover: https://spring.io/images/spring-logo-9146a4d3298760c2e7e49595184e1975.svg\ntoc:\ntoc_number:\ntoc_style_simple:\nkatex:\naplayer:\nhighlight_shrink:\n---\n\n# \n\n# 认证中心\n","slug":"springCloud/springCloud认证中心搭建","published":1,"updated":"2022-07-02T08:37:06.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x4g000zb6qf4fk681sn","content":"<hr>\n<p>title: springCloud认证中心搭建<br>comments: true<br>copyright: true<br>copyright_author: wuy<br>copyright_author_href: ‘<a href=\"https://xxxxxx.com&/#39;\">https://xxxxxx.com&#39;</a><br>copyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者<br>date: 2022-06-27 21:12:59<br>tags: </p>\n<ul>\n<li>springCloud<br>categories: </li>\n<li>springCloud<br>keywords:<br>description:<br>top_img:<br>cover: <a href=\"https://spring.io/images/spring-logo-9146a4d3298760c2e7e49595184e1975.svg\">https://spring.io/images/spring-logo-9146a4d3298760c2e7e49595184e1975.svg</a><br>toc:<br>toc_number:<br>toc_style_simple:<br>katex:<br>aplayer:<br>highlight_shrink:</li>\n</ul>\n<hr>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"认证中心\"><a href=\"#认证中心\" class=\"headerlink\" title=\"认证中心\"></a>认证中心</h1>","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1649133816831-de3d91d25288?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80","excerpt":"","more":"<hr>\n<p>title: springCloud认证中心搭建<br>comments: true<br>copyright: true<br>copyright_author: wuy<br>copyright_author_href: ‘<a href=\"https://xxxxxx.com&/#39;\">https://xxxxxx.com&#39;</a><br>copyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者<br>date: 2022-06-27 21:12:59<br>tags: </p>\n<ul>\n<li>springCloud<br>categories: </li>\n<li>springCloud<br>keywords:<br>description:<br>top_img:<br>cover: <a href=\"https://spring.io/images/spring-logo-9146a4d3298760c2e7e49595184e1975.svg\">https://spring.io/images/spring-logo-9146a4d3298760c2e7e49595184e1975.svg</a><br>toc:<br>toc_number:<br>toc_style_simple:<br>katex:<br>aplayer:<br>highlight_shrink:</li>\n</ul>\n<hr>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"认证中心\"><a href=\"#认证中心\" class=\"headerlink\" title=\"认证中心\"></a>认证中心</h1>"},{"title":"常用git命令","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"---\ntitle: 常用的git命令\ndate: {{ date }}\ntags: \n    - git\ncategories:\n    - git\nkeywords:\ndescription:git常用命令\ntop_img: https://www.linuxidc.com/upload/2015_10/151004070281631.jpg\ncomments: true\ncover: https://cdn.vox-cdn.com/thumbor/A4_6e24biy8bp4ahrL-TNfaircI=/0x0:2040x1360/1200x800/filters:focal(1287x538:1613x864)/cdn.vox-cdn.com/uploads/chorus_image/image/63739082/git.0.jpg\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright: true\nhighlight_shrink:\ncopyright_author: 'wuy'\ncopyright_author_href: https://xxxxxx.com\ncopyright_info: '此文章版权归wuy所有，如有转载，请注明来自原作者'\n---\n\n\n\n# 强制上传文件\n\n```bash\n# origin 仓库地址 \n# 后面是分支名称\ngit push -u origin feature/20220630_commodity -f \n```\n\n\n\n# 拉取指定分支的文件\n\n```bash\ngit pull origin feature/20220630_commodity  \n```\n\n\n\n# 查看本地仓库的文件\n\n```bash\ngit ls-files |grep <文件名称>\n```\n\n\n\n# 查看所有的分支\n\n```bash\ngit branch -a\n\n==============\n  a\n  feature/20220630_commodity\n  master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/dev\n  remotes/origin/feature/20220630_commodity\n  remotes/origin/master\n```\n\n远程仓库都是含有remotes。\n\n\n\n# 切换分支\n\n```bash\ngit checkout remotes/origin/feature/20220630_commodity\n```\n\n","source":"_posts/git/常用git命令.md","raw":"title: 常用git命令\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n---\ntitle: 常用的git命令\ndate: {{ date }}\ntags: \n    - git\ncategories:\n    - git\nkeywords:\ndescription:git常用命令\ntop_img: https://www.linuxidc.com/upload/2015_10/151004070281631.jpg\ncomments: true\ncover: https://cdn.vox-cdn.com/thumbor/A4_6e24biy8bp4ahrL-TNfaircI=/0x0:2040x1360/1200x800/filters:focal(1287x538:1613x864)/cdn.vox-cdn.com/uploads/chorus_image/image/63739082/git.0.jpg\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright: true\nhighlight_shrink:\ncopyright_author: 'wuy'\ncopyright_author_href: https://xxxxxx.com\ncopyright_info: '此文章版权归wuy所有，如有转载，请注明来自原作者'\n---\n\n\n\n# 强制上传文件\n\n```bash\n# origin 仓库地址 \n# 后面是分支名称\ngit push -u origin feature/20220630_commodity -f \n```\n\n\n\n# 拉取指定分支的文件\n\n```bash\ngit pull origin feature/20220630_commodity  \n```\n\n\n\n# 查看本地仓库的文件\n\n```bash\ngit ls-files |grep <文件名称>\n```\n\n\n\n# 查看所有的分支\n\n```bash\ngit branch -a\n\n==============\n  a\n  feature/20220630_commodity\n  master\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/dev\n  remotes/origin/feature/20220630_commodity\n  remotes/origin/master\n```\n\n远程仓库都是含有remotes。\n\n\n\n# 切换分支\n\n```bash\ngit checkout remotes/origin/feature/20220630_commodity\n```\n\n","slug":"git/常用git命令","published":1,"updated":"2022-07-02T08:37:06.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x4h0013b6qfgvn7d501","content":"<hr>\n<p>title: 常用的git命令<br>date: 1451647200000<br>tags:<br>    - git<br>categories:<br>    - git<br>keywords:<br>description:git常用命令<br>top_img: <a href=\"https://www.linuxidc.com/upload/2015_10/151004070281631.jpg\">https://www.linuxidc.com/upload/2015_10/151004070281631.jpg</a><br>comments: true<br>cover: <a href=\"https://cdn.vox-cdn.com/thumbor/A4_6e24biy8bp4ahrL-TNfaircI=/0x0:2040x1360/1200x800/filters:focal(1287x538:1613x864)/cdn.vox-cdn.com/uploads/chorus_image/image/63739082/git.0.jpg\">https://cdn.vox-cdn.com/thumbor/A4_6e24biy8bp4ahrL-TNfaircI=/0x0:2040x1360/1200x800/filters:focal(1287x538:1613x864)/cdn.vox-cdn.com/uploads/chorus_image/image/63739082/git.0.jpg</a><br>toc:<br>toc_number:<br>toc_style_simple:<br>copyright: true<br>highlight_shrink:<br>copyright_author: ‘wuy’<br>copyright_author_href: <a href=\"https://xxxxxx.com/\">https://xxxxxx.com</a><br>copyright_info: ‘此文章版权归wuy所有，如有转载，请注明来自原作者’</p>\n<hr>\n<h1 id=\"强制上传文件\"><a href=\"#强制上传文件\" class=\"headerlink\" title=\"强制上传文件\"></a>强制上传文件</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># origin 仓库地址 </span></span><br><span class=\"line\"><span class=\"comment\"># 后面是分支名称</span></span><br><span class=\"line\">git push -u origin feature/20220630_commodity -f </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"拉取指定分支的文件\"><a href=\"#拉取指定分支的文件\" class=\"headerlink\" title=\"拉取指定分支的文件\"></a>拉取指定分支的文件</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin feature/20220630_commodity  </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"查看本地仓库的文件\"><a href=\"#查看本地仓库的文件\" class=\"headerlink\" title=\"查看本地仓库的文件\"></a>查看本地仓库的文件</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files |grep &lt;文件名称&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"查看所有的分支\"><a href=\"#查看所有的分支\" class=\"headerlink\" title=\"查看所有的分支\"></a>查看所有的分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\">==============</span><br><span class=\"line\">  a</span><br><span class=\"line\">  feature/20220630_commodity</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/dev</span><br><span class=\"line\">  remotes/origin/feature/20220630_commodity</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n\n<p>远程仓库都是含有remotes。</p>\n<h1 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout remotes/origin/feature/20220630_commodity</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1655215271909-f894e3dd3f98?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80","excerpt":"","more":"<hr>\n<p>title: 常用的git命令<br>date: 1451647200000<br>tags:<br>    - git<br>categories:<br>    - git<br>keywords:<br>description:git常用命令<br>top_img: <a href=\"https://www.linuxidc.com/upload/2015_10/151004070281631.jpg\">https://www.linuxidc.com/upload/2015_10/151004070281631.jpg</a><br>comments: true<br>cover: <a href=\"https://cdn.vox-cdn.com/thumbor/A4_6e24biy8bp4ahrL-TNfaircI=/0x0:2040x1360/1200x800/filters:focal(1287x538:1613x864)/cdn.vox-cdn.com/uploads/chorus_image/image/63739082/git.0.jpg\">https://cdn.vox-cdn.com/thumbor/A4_6e24biy8bp4ahrL-TNfaircI=/0x0:2040x1360/1200x800/filters:focal(1287x538:1613x864)/cdn.vox-cdn.com/uploads/chorus_image/image/63739082/git.0.jpg</a><br>toc:<br>toc_number:<br>toc_style_simple:<br>copyright: true<br>highlight_shrink:<br>copyright_author: ‘wuy’<br>copyright_author_href: <a href=\"https://xxxxxx.com/\">https://xxxxxx.com</a><br>copyright_info: ‘此文章版权归wuy所有，如有转载，请注明来自原作者’</p>\n<hr>\n<h1 id=\"强制上传文件\"><a href=\"#强制上传文件\" class=\"headerlink\" title=\"强制上传文件\"></a>强制上传文件</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># origin 仓库地址 </span></span><br><span class=\"line\"><span class=\"comment\"># 后面是分支名称</span></span><br><span class=\"line\">git push -u origin feature/20220630_commodity -f </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"拉取指定分支的文件\"><a href=\"#拉取指定分支的文件\" class=\"headerlink\" title=\"拉取指定分支的文件\"></a>拉取指定分支的文件</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin feature/20220630_commodity  </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"查看本地仓库的文件\"><a href=\"#查看本地仓库的文件\" class=\"headerlink\" title=\"查看本地仓库的文件\"></a>查看本地仓库的文件</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files |grep &lt;文件名称&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"查看所有的分支\"><a href=\"#查看所有的分支\" class=\"headerlink\" title=\"查看所有的分支\"></a>查看所有的分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\">==============</span><br><span class=\"line\">  a</span><br><span class=\"line\">  feature/20220630_commodity</span><br><span class=\"line\">  master</span><br><span class=\"line\">  remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">  remotes/origin/dev</span><br><span class=\"line\">  remotes/origin/feature/20220630_commodity</span><br><span class=\"line\">  remotes/origin/master</span><br></pre></td></tr></table></figure>\n\n<p>远程仓库都是含有remotes。</p>\n<h1 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout remotes/origin/feature/20220630_commodity</span><br></pre></td></tr></table></figure>\n\n"},{"title":"从0开始搭建自己的网站-一","author":"远方","date":"2016-01-01T11:20:00.000Z","_content":"---\ntitle: 从0开始搭建自己的网站(一)\ncomments: true\ncopyright: true\ncopyright_author: wuy\ncopyright_author_href: 'https://xxxxxx.com'\ncopyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者\ndate: 2022-06-25 21:01:31\ntags: \n  - html\n  - 前端\n  - css\ncategories: 搭建个人网站\nkeywords:\ndescription:\ntop_img:\ncover:\ntoc:\ntoc_number:\ntoc_style_simple:\nkatex:\naplayer:\nhighlight_shrink:\n---\n\n# 网站的初始化\n\n创建一个html文件,css文件,js文件\n\n\n\n# 网站header部分(导航栏部分)\n\n\n\n\n\n","source":"_posts/个人网站/从0开始搭建自己的网站-一.md","raw":"title: 从0开始搭建自己的网站-一\nauthor: 远方\ntags:\n  - LeetCode\n  - 算法\ncategories:\n  - LeetCode破局攻略\ndate: 2016-01-01 19:20:00\n---\n---\ntitle: 从0开始搭建自己的网站(一)\ncomments: true\ncopyright: true\ncopyright_author: wuy\ncopyright_author_href: 'https://xxxxxx.com'\ncopyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者\ndate: 2022-06-25 21:01:31\ntags: \n  - html\n  - 前端\n  - css\ncategories: 搭建个人网站\nkeywords:\ndescription:\ntop_img:\ncover:\ntoc:\ntoc_number:\ntoc_style_simple:\nkatex:\naplayer:\nhighlight_shrink:\n---\n\n# 网站的初始化\n\n创建一个html文件,css文件,js文件\n\n\n\n# 网站header部分(导航栏部分)\n\n\n\n\n\n","slug":"个人网站/从0开始搭建自己的网站-一","published":1,"updated":"2022-07-02T08:37:06.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl78w5x4i0016b6qfc3p9gb8w","content":"<hr>\n<p>title: 从0开始搭建自己的网站(一)<br>comments: true<br>copyright: true<br>copyright_author: wuy<br>copyright_author_href: ‘<a href=\"https://xxxxxx.com&/#39;\">https://xxxxxx.com&#39;</a><br>copyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者<br>date: 2022-06-25 21:01:31<br>tags: </p>\n<ul>\n<li>html</li>\n<li>前端</li>\n<li>css<br>categories: 搭建个人网站<br>keywords:<br>description:<br>top_img:<br>cover:<br>toc:<br>toc_number:<br>toc_style_simple:<br>katex:<br>aplayer:<br>highlight_shrink:</li>\n</ul>\n<hr>\n<h1 id=\"网站的初始化\"><a href=\"#网站的初始化\" class=\"headerlink\" title=\"网站的初始化\"></a>网站的初始化</h1><p>创建一个html文件,css文件,js文件</p>\n<h1 id=\"网站header部分-导航栏部分\"><a href=\"#网站header部分-导航栏部分\" class=\"headerlink\" title=\"网站header部分(导航栏部分)\"></a>网站header部分(导航栏部分)</h1>","site":{"data":{}},"cover":"https://images.unsplash.com/photo-1633078141386-eec9b3461294?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=326&q=80","excerpt":"","more":"<hr>\n<p>title: 从0开始搭建自己的网站(一)<br>comments: true<br>copyright: true<br>copyright_author: wuy<br>copyright_author_href: ‘<a href=\"https://xxxxxx.com&/#39;\">https://xxxxxx.com&#39;</a><br>copyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者<br>date: 2022-06-25 21:01:31<br>tags: </p>\n<ul>\n<li>html</li>\n<li>前端</li>\n<li>css<br>categories: 搭建个人网站<br>keywords:<br>description:<br>top_img:<br>cover:<br>toc:<br>toc_number:<br>toc_style_simple:<br>katex:<br>aplayer:<br>highlight_shrink:</li>\n</ul>\n<hr>\n<h1 id=\"网站的初始化\"><a href=\"#网站的初始化\" class=\"headerlink\" title=\"网站的初始化\"></a>网站的初始化</h1><p>创建一个html文件,css文件,js文件</p>\n<h1 id=\"网站header部分-导航栏部分\"><a href=\"#网站header部分-导航栏部分\" class=\"headerlink\" title=\"网站header部分(导航栏部分)\"></a>网站header部分(导航栏部分)</h1>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl78w5x3m0001b6qfchyy76yi","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x42000fb6qfcc485jbm"},{"post_id":"cl78w5x3y0009b6qfd5lpgkq8","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x44000jb6qfek0a2jpd"},{"post_id":"cl78w5x40000cb6qfe3blhnv4","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x45000mb6qf5j51g9hk"},{"post_id":"cl78w5x3p0003b6qfhea7dnhg","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x47000qb6qf6pp0c4uv"},{"post_id":"cl78w5x41000db6qfbdqe1us0","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x4e000tb6qfctfj266d"},{"post_id":"cl78w5x43000ib6qfdd5j6x00","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x4f000xb6qfh2ht5sgz"},{"post_id":"cl78w5x3w0007b6qf93970cxp","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x4g0010b6qfcgu4e3ih"},{"post_id":"cl78w5x44000lb6qf3jecd1hj","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x4h0014b6qfc5u3aij8"},{"post_id":"cl78w5x46000pb6qffagwfwfr","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x4j0017b6qfh3buh3uf"},{"post_id":"cl78w5x4d000sb6qf3bjz6dv5","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x4j001ab6qf43c5dlka"},{"post_id":"cl78w5x4f000wb6qfgut41lkz","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x4k001cb6qfgnyq5pr5"},{"post_id":"cl78w5x4g000zb6qf4fk681sn","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x4k001eb6qf7t7a4klw"},{"post_id":"cl78w5x4h0013b6qfgvn7d501","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x4k001gb6qf1j1w7ocs"},{"post_id":"cl78w5x4i0016b6qfc3p9gb8w","category_id":"cl78w5x3t0004b6qfh7w32vh4","_id":"cl78w5x4k001ib6qf0ha655vc"}],"PostTag":[{"post_id":"cl78w5x40000cb6qfe3blhnv4","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x43000hb6qf377x6rbp"},{"post_id":"cl78w5x40000cb6qfe3blhnv4","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x44000kb6qf8bedcsm1"},{"post_id":"cl78w5x3m0001b6qfchyy76yi","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x46000ob6qf2i84hw3v"},{"post_id":"cl78w5x3m0001b6qfchyy76yi","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4d000rb6qf8awj0d1x"},{"post_id":"cl78w5x41000db6qfbdqe1us0","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x4e000vb6qfcb8y5hpp"},{"post_id":"cl78w5x41000db6qfbdqe1us0","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4f000yb6qf924z42mu"},{"post_id":"cl78w5x43000ib6qfdd5j6x00","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x4h0012b6qf7w8z7wde"},{"post_id":"cl78w5x43000ib6qfdd5j6x00","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4i0015b6qfdcfa23sn"},{"post_id":"cl78w5x44000lb6qf3jecd1hj","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x4j0019b6qf2whi9464"},{"post_id":"cl78w5x44000lb6qf3jecd1hj","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4k001bb6qf72j9350i"},{"post_id":"cl78w5x46000pb6qffagwfwfr","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x4k001db6qf508aeeum"},{"post_id":"cl78w5x46000pb6qffagwfwfr","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4k001fb6qfa82e2619"},{"post_id":"cl78w5x3p0003b6qfhea7dnhg","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x4k001hb6qfb6b72bee"},{"post_id":"cl78w5x3p0003b6qfhea7dnhg","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4k001jb6qf2cbu55x6"},{"post_id":"cl78w5x4d000sb6qf3bjz6dv5","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x4k001kb6qf1hr75n3m"},{"post_id":"cl78w5x4d000sb6qf3bjz6dv5","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4l001lb6qfdazrhk3w"},{"post_id":"cl78w5x4f000wb6qfgut41lkz","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x4l001mb6qfbhn96uom"},{"post_id":"cl78w5x4f000wb6qfgut41lkz","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4l001nb6qfg31l5sfc"},{"post_id":"cl78w5x4g000zb6qf4fk681sn","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x4l001ob6qfbyddhn16"},{"post_id":"cl78w5x4g000zb6qf4fk681sn","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4l001pb6qfhejl4tma"},{"post_id":"cl78w5x4h0013b6qfgvn7d501","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x4l001qb6qfa6kwbs3a"},{"post_id":"cl78w5x4h0013b6qfgvn7d501","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4l001rb6qf0y9hhdff"},{"post_id":"cl78w5x3w0007b6qf93970cxp","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x4l001sb6qfa1hob146"},{"post_id":"cl78w5x3w0007b6qf93970cxp","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4l001tb6qf5tbtckki"},{"post_id":"cl78w5x4i0016b6qfc3p9gb8w","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x4l001ub6qf8va3d6pi"},{"post_id":"cl78w5x4i0016b6qfc3p9gb8w","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4l001vb6qfd9zn1eh7"},{"post_id":"cl78w5x3y0009b6qfd5lpgkq8","tag_id":"cl78w5x3v0005b6qf90li0an3","_id":"cl78w5x4l001wb6qf9j327x7e"},{"post_id":"cl78w5x3y0009b6qfd5lpgkq8","tag_id":"cl78w5x3z000bb6qfecer9x60","_id":"cl78w5x4l001xb6qfekwz58d8"}],"Tag":[{"name":"LeetCode","_id":"cl78w5x3v0005b6qf90li0an3"},{"name":"算法","_id":"cl78w5x3z000bb6qfecer9x60"}]}}