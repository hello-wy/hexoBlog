<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/hexoBlog/2023/03/31/gmall%E6%96%87%E6%A1%A3/mybatis-plus%20%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4/"/>
      <url>/hexoBlog/2023/03/31/gmall%E6%96%87%E6%A1%A3/mybatis-plus%20%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="配置全局逻辑删除"><a href="#配置全局逻辑删除" class="headerlink" title="配置全局逻辑删除"></a>配置全局逻辑删除</h1><p>在application.yml中配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span><span class="comment">#主要设置这里，如果你是默认的，那么可以不用配置，</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure><h1 id="在实体类中配置"><a href="#在实体类中配置" class="headerlink" title="在实体类中配置"></a>在实体类中配置</h1><p>找到具体字段使用注解@TableLogic</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否显示[0-不显示，1显示]</span></span><br><span class="line"><span class="comment"> * value 是逻辑未删除值， deval是逻辑删除值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableLogic(value = &quot;1&quot;,delval = &quot;0&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>调用deleteBatchIds，批量逻辑删除元祖</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python实现验证码识别接口</title>
      <link href="/hexoBlog/2022/08/25/captcha/"/>
      <url>/hexoBlog/2022/08/25/captcha/</url>
      
        <content type="html"><![CDATA[<h1 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h1><h1 id="GET-http-120-55-75-103-3000"><a href="#GET-http-120-55-75-103-3000" class="headerlink" title="GET  http://120.55.75.103:3000"></a>GET  <a href="http://120.55.75.103:3000/">http://120.55.75.103:3000</a></h1><p>Body  (json)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;img&quot;: &quot;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&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="response"><a href="#response" class="headerlink" title="response"></a>response</h1><p><code>369y</code></p><p>使用到了flask后端框架实现+ddddocr验证码识别库来实现接口.</p>]]></content>
      
      
      <categories>
          
          <category> works </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hello-world</title>
      <link href="/hexoBlog/2016/01/01/hello-world/"/>
      <url>/hexoBlog/2016/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<hr><p>title: Hello World<br>cover: <a href="https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8Y29kZXxlbnwwfHwwfHw=&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60">https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8Y29kZXxlbnwwfHwwfHw%3D&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60</a></p><hr><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>testPost</title>
      <link href="/hexoBlog/2016/01/01/testPost/"/>
      <url>/hexoBlog/2016/01/01/testPost/</url>
      
        <content type="html"><![CDATA[<hr><p>title: testPost<br>comments: true<br>copyright: true<br>copyright_author: wuy<br>copyright_author_href: ‘<a href="https://xxxxxx.com&/#39;">https://xxxxxx.com&#39;</a><br>copyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者<br>date: 2022-06-24 15:18:50<br>tags:</p><ul><li>测试</li><li>验证<br>categories:<br>keywords:<br>description:<br>top_img:<br>cover:<br>toc:<br>toc_number:<br>toc_style_simple:<br>katex:<br>aplayer:<br>highlight_shrink:</li></ul><hr><p>l</p><h1 id="测试文章"><a href="#测试文章" class="headerlink" title="测试文章"></a>测试文章</h1><p>我也不知道说些什么,反正就是恒开心.</p><blockquote><p>引用块,不知道有没有用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用git命令</title>
      <link href="/hexoBlog/2016/01/01/git/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
      <url>/hexoBlog/2016/01/01/git/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 常用的git命令<br>date: 1451647200000<br>tags:<br>    - git<br>categories:<br>    - git<br>keywords:<br>description:git常用命令<br>top_img: <a href="https://www.linuxidc.com/upload/2015_10/151004070281631.jpg">https://www.linuxidc.com/upload/2015_10/151004070281631.jpg</a><br>comments: true<br>cover: <a href="https://cdn.vox-cdn.com/thumbor/A4_6e24biy8bp4ahrL-TNfaircI=/0x0:2040x1360/1200x800/filters:focal(1287x538:1613x864)/cdn.vox-cdn.com/uploads/chorus_image/image/63739082/git.0.jpg">https://cdn.vox-cdn.com/thumbor/A4_6e24biy8bp4ahrL-TNfaircI=/0x0:2040x1360/1200x800/filters:focal(1287x538:1613x864)/cdn.vox-cdn.com/uploads/chorus_image/image/63739082/git.0.jpg</a><br>toc:<br>toc_number:<br>toc_style_simple:<br>copyright: true<br>highlight_shrink:<br>copyright_author: ‘wuy’<br>copyright_author_href: <a href="https://xxxxxx.com/">https://xxxxxx.com</a><br>copyright_info: ‘此文章版权归wuy所有，如有转载，请注明来自原作者’</p><hr><h1 id="强制上传文件"><a href="#强制上传文件" class="headerlink" title="强制上传文件"></a>强制上传文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># origin 仓库地址 </span></span><br><span class="line"><span class="comment"># 后面是分支名称</span></span><br><span class="line">git push -u origin feature/20220630_commodity -f </span><br></pre></td></tr></table></figure><h1 id="拉取指定分支的文件"><a href="#拉取指定分支的文件" class="headerlink" title="拉取指定分支的文件"></a>拉取指定分支的文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin feature/20220630_commodity  </span><br></pre></td></tr></table></figure><h1 id="查看本地仓库的文件"><a href="#查看本地仓库的文件" class="headerlink" title="查看本地仓库的文件"></a>查看本地仓库的文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files |grep &lt;文件名称&gt;</span><br></pre></td></tr></table></figure><h1 id="查看所有的分支"><a href="#查看所有的分支" class="headerlink" title="查看所有的分支"></a>查看所有的分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line">==============</span><br><span class="line">  a</span><br><span class="line">  feature/20220630_commodity</span><br><span class="line">  master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/dev</span><br><span class="line">  remotes/origin/feature/20220630_commodity</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure><p>远程仓库都是含有remotes。</p><h1 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout remotes/origin/feature/20220630_commodity</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSR303校验</title>
      <link href="/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/JSR303%E6%A0%A1%E9%AA%8C/"/>
      <url>/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/JSR303%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>后端开启校验在实体类中使用注解@NotNull、@NotBlank之类的这些类都在javax.validation.constraints包下</p><p>访问方法:双击shift进行搜索方法.</p><p>所有的校验注解在validationMessages_zh_cn.peoperties这个是中文注解</p><p>然后在controller对应的entity传参数中添加<code>@valid</code>开启校验功能。</p><h1 id="valid和-validation区别"><a href="#valid和-validation区别" class="headerlink" title="@valid和@validation区别"></a>@valid和@validation区别</h1><p>@valid是一个标准没有分组功能，@validation具有分组功能。</p><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><ol><li>引入springboot-starter-validation包</li><li>给bean字段添加验证注解</li><li>开启校验<code>@valid</code>或者<code>@validated</code>,开启之后会有一个默认的响应</li><li>通过一个统一的异常处理类进行捕获所有验证异常的异常。使用@controllerAdvice</li><li>分组校验使用<code>@validated</code>(必须使用)在controller传参数之前。</li></ol><h2 id="统一的异常处理-controllerAdvice-exceptHandler"><a href="#统一的异常处理-controllerAdvice-exceptHandler" class="headerlink" title="统一的异常处理  @controllerAdvice+@exceptHandler"></a>统一的异常处理  @controllerAdvice+@exceptHandler</h2><p>通过抽取异常处理,进行统一的管理.</p><h3 id="针对特定的错误进行集中处理"><a href="#针对特定的错误进行集中处理" class="headerlink" title="针对特定的错误进行集中处理"></a>针对特定的错误进行集中处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;com.bigdata.gulimall.product.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">handleValidException</span><span class="params">(MethodArgumentNotValidException exception)</span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> exception.getBindingResult();</span><br><span class="line">        bindingResult.getFieldErrors().forEach(fieldError -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> fieldError.getDefaultMessage();</span><br><span class="line">            <span class="type">String</span> <span class="variable">field</span> <span class="operator">=</span> fieldError.getField();</span><br><span class="line">            map.put(field,message);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        log.error(<span class="string">&quot;数据校验出现问题&#123;&#125;,异常类型&#123;&#125;&quot;</span>,exception.getMessage(),exception.getClass());</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="number">400</span>,<span class="string">&quot;数据校验出现问题&quot;</span>).put(<span class="string">&quot;data&quot;</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码,通过exceptionhandler设置value值进行对参数格式不合法，进行统一的管理.</p><h3 id="默认统一处理异常-未知的"><a href="#默认统一处理异常-未知的" class="headerlink" title="默认统一处理异常(未知的)"></a>默认统一处理异常(未知的)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(value = Throwable.class)</span></span><br><span class="line"> <span class="keyword">public</span> R <span class="title function_">handleException</span><span class="params">(Throwable throwable)</span>&#123;</span><br><span class="line">     log.error(<span class="string">&quot;未知异常&#123;&#125;,异常类型&#123;&#125;&quot;</span>,throwable.getMessage(),throwable.getClass());</span><br><span class="line">     <span class="keyword">return</span> R.error(BizCodeEnum.UNKNOW_EXEPTION.getCode(),BizCodeEnum.UNKNOW_EXEPTION.getMsg());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>直接截断throwable异常，</p><h2 id="系统错误码（枚举类）"><a href="#系统错误码（枚举类）" class="headerlink" title="系统错误码（枚举类）"></a>系统错误码（枚举类）</h2><p>使用统一的管理错误码的类。对错误码以及错误提示进行统一的管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">BizCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    UNKNOW_EXEPTION(<span class="number">10000</span>,<span class="string">&quot;系统未知异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    VALID_EXCEPTION( <span class="number">10001</span>,<span class="string">&quot;参数格式校验失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    BizCodeEnum(<span class="type">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分组校验-可以使用多个VO进行代替解决"><a href="#分组校验-可以使用多个VO进行代替解决" class="headerlink" title="分组校验(可以使用多个VO进行代替解决)"></a>分组校验(可以使用多个VO进行代替解决)</h1><p>不同的场景使用不同的校验，比如说添加时，和插入时这个是不同的。</p><p>使用groups</p><p>使用@valid</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三级菜单</title>
      <link href="/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E4%B8%89%E7%BA%A7%E8%8F%9C%E5%8D%95/"/>
      <url>/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E4%B8%89%E7%BA%A7%E8%8F%9C%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="三级菜单"><a href="#三级菜单" class="headerlink" title="三级菜单"></a>三级菜单</h1><blockquote><p>主要亮点是：使用了流来处理对象列表，比较的巧妙。</p></blockquote><h2 id="编写接口-controller"><a href="#编写接口-controller" class="headerlink" title="编写接口(controller)"></a>编写接口(controller)</h2><h2 id="递归调用获取子菜单"><a href="#递归调用获取子菜单" class="headerlink" title="递归调用获取子菜单"></a>递归调用获取子菜单</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>使用流处理，不需要关注数据的类型，是一个通用的模版。</p><ol><li>获取所有的菜单信息</li><li>将菜单信息转化成流，过滤出一级菜单（parent=0）</li><li>使用递归的方法找子菜单（prentId=children.parentId）<ol><li>过滤出父菜单的所有子菜单（filter）</li><li>对每一个子菜单在做查询子菜单的递归操作</li><li>完成之后进行排序，排序的时候防止空指针异常，使用三元运算。</li><li>collect收集结果</li></ol></li><li>同样进行排序</li><li>最后collect收集流成一个list返回结果</li></ol><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>在此向操作之前还需要在entity实体类中添加一个属性，children属性存放父标签下子标签。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;CategoryEntity&gt; children;</span><br></pre></td></tr></table></figure><blockquote><p> 这里还使用了一个@tableField注解来声明不需要在数据库中保存。</p></blockquote><p>在这个操作中使用了递归的方法实现了多级菜单的分类以及排序操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">categoryTree</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        查询所有菜单,条件为空.</span></span><br><span class="line">        List&lt;CategoryEntity&gt; entityList = baseMapper.selectList(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//        把list转化成流进行操作</span></span><br><span class="line">        List&lt;CategoryEntity&gt; categoryTree = entityList.stream()</span><br><span class="line">                .filter(item -&gt; item.getParentCid() == <span class="number">0</span>)       <span class="comment">//进行过滤,找到所有一级菜单</span></span><br><span class="line">                .map(item-&gt;&#123;</span><br><span class="line">                    item.setChildren(categoryChildren(entityList, item));       <span class="comment">//设置子菜单</span></span><br><span class="line">                    <span class="keyword">return</span> item;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">//进行排序菜单1,菜单2 还要进行空指针判断,不能为空</span></span><br><span class="line">                .sorted((menu1,menu2)-&gt; (menu1.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu1.getSort()) - (menu2.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu2.getSort()))</span><br><span class="line">                .collect(Collectors.toList());          <span class="comment">//转化成list类型</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> categoryTree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">categoryChildren</span><span class="params">(List&lt;CategoryEntity&gt; entityList,CategoryEntity menu)</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;CategoryEntity&gt; childrenList = entityList.stream()</span><br><span class="line">          <span class="comment">//对每一个</span></span><br><span class="line">                .filter(item-&gt; item.getParentCid() == menu.getCatId())</span><br><span class="line">          </span><br><span class="line">                .map(item-&gt;&#123;</span><br><span class="line">                    item.setChildren(categoryChildren(entityList, item));</span><br><span class="line">                    <span class="keyword">return</span> item;</span><br><span class="line">                &#125;)</span><br><span class="line">                .sorted((menu1,menu2)-&gt; (menu1.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu1.getSort()) - (menu2.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu2.getSort()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> childrenList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mybatis进行分页查询</title>
      <link href="/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E4%BD%BF%E7%94%A8mybatis%E8%BF%9B%E8%A1%8C%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
      <url>/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E4%BD%BF%E7%94%A8mybatis%E8%BF%9B%E8%A1%8C%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PageUtils <span class="title function_">queryPage</span><span class="params">(Map&lt;String, Object&gt; params, Long catelogId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(catelogId==<span class="number">0</span>)&#123;</span><br><span class="line">            IPage&lt;AttrGroupEntity&gt; page = <span class="built_in">this</span>.page(<span class="keyword">new</span> <span class="title class_">Query</span>&lt;AttrGroupEntity&gt;().getPage(params),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;AttrGroupEntity&gt;());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageUtils</span>(page);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        从参数中获取一个key,key是检索关键字,用户查询的数据</span></span><br><span class="line">        String key=(String) params.get(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="comment">//        select * from pms_attr_group where catelog_id=? and(attr_group_id = key or attr_group_name like %?%)</span></span><br><span class="line">        QueryWrapper&lt;AttrGroupEntity&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;AttrGroupEntity&gt;().eq(<span class="string">&quot;catelog_id&quot;</span>, catelogId);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(key))&#123;</span><br><span class="line"><span class="comment">//            and接受一个consumer,函数式编程</span></span><br><span class="line">            wrapper.and(obj-&gt; obj.eq(<span class="string">&quot;attr_group_id&quot;</span>,key).or().like(<span class="string">&quot;attr_group_name&quot;</span>, key));</span><br><span class="line">        &#125;</span><br><span class="line">        IPage&lt;AttrGroupEntity&gt; page = page(<span class="keyword">new</span> <span class="title class_">Query</span>&lt;AttrGroupEntity&gt;().getPage(params),</span><br><span class="line">                wrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageUtils</span>(page);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在这行代码中，有一些需要注意的点：</p><ol><li><p>this.page（）,可以使用page（），这个方法是在IService接口中进行定义了的。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> &lt;E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;T&gt;&gt; E <span class="title function_">page</span><span class="params">(E page, Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getBaseMapper().selectPage(page, queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;E <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;T&gt;&gt; E <span class="title function_">page</span><span class="params">(E page)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.page(page, Wrappers.emptyWrapper());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 所以可以通过this直接调用、使用。</p></li><li><p>在这个page方法中需要传入连个参数，一个是查询的表，需要new query出来，还有一个就是查询的条件，wrapper。最后通过分装类进行返回数据（包含记录数以及传输的数据等信息）</p></li></ol><p>​        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageUtils</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 总记录数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> totalCount;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每页记录数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pageSize;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 总页数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> totalPage;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前页数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> currPage;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;?&gt; list;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list        列表数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> totalCount  总记录数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize    每页记录数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> currPage    当前页数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PageUtils</span><span class="params">(List&lt;?&gt; list, <span class="type">int</span> totalCount, <span class="type">int</span> pageSize, <span class="type">int</span> currPage)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.list = list;</span><br><span class="line"><span class="built_in">this</span>.totalCount = totalCount;</span><br><span class="line"><span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line"><span class="built_in">this</span>.currPage = currPage;</span><br><span class="line"><span class="built_in">this</span>.totalPage = (<span class="type">int</span>)Math.ceil((<span class="type">double</span>)totalCount/pageSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PageUtils</span><span class="params">(IPage&lt;?&gt; page)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.list = page.getRecords();</span><br><span class="line"><span class="built_in">this</span>.totalCount = (<span class="type">int</span>)page.getTotal();</span><br><span class="line"><span class="built_in">this</span>.pageSize = (<span class="type">int</span>)page.getSize();</span><br><span class="line"><span class="built_in">this</span>.currPage = (<span class="type">int</span>)page.getCurrent();</span><br><span class="line"><span class="built_in">this</span>.totalPage = (<span class="type">int</span>)page.getPages();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotalCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> totalCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalCount</span><span class="params">(<span class="type">int</span> totalCount)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.totalCount = totalCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageSize</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pageSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(<span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotalPage</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> totalPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalPage</span><span class="params">(<span class="type">int</span> totalPage)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.totalPage = totalPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurrPage</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> currPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrPage</span><span class="params">(<span class="type">int</span> currPage)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.currPage = currPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;?&gt; getList() &#123;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;?&gt; list)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.list = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端功能总结(2)</title>
      <link href="/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93(2)/"/>
      <url>/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93(2)/</url>
      
        <content type="html"><![CDATA[<p>拖动菜单栏  P54</p><p>逻辑判断‼️</p><p>前端字段校验 p66</p><p>子组件向父组件传递数据p72</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端功能总结</title>
      <link href="/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93/"/>
      <url>/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E5%89%8D%E7%AB%AF%E5%8A%9F%E8%83%BD%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>拖动菜单栏  P54</p><p>逻辑判断‼️</p><p>前端字段校验 p66</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口和抽象类使用的好处</title>
      <link href="/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%BD%BF%E7%94%A8%E7%9A%84%E5%A5%BD%E5%A4%84/"/>
      <url>/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%BD%BF%E7%94%A8%E7%9A%84%E5%A5%BD%E5%A4%84/</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>抽象类实现接口，抽象类中可以实现一些接口的方法，然后在具体的实现过程中（使用一个类来继承抽象类的时候），不需要重新写那个被实现的方法，直接重写没有实现的方法，从而实现不用全部实现的效果。</p><h1 id="接下来举例说明"><a href="#接下来举例说明" class="headerlink" title="接下来举例说明"></a>接下来举例说明</h1><p>首先一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">myInt</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">abclass</span> <span class="keyword">implements</span> <span class="title class_">myInt</span>&#123;</span><br><span class="line">abstact <span class="keyword">void</span> <span class="title function_">hah</span><span class="params">()</span>;#抽象类自己的方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抽象类重写menthods2打印&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> hah&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抽象类的方法打印&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实际应用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">abclass</span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">hah</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;test类打印&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">methods1</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;test重写接口methods1方法&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面这个例子可以看出，在抽象类中对一些接口可以进行初始化，后面具体实现的时候可以不需要再对此方法进行重写。简化开发。</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>在开发中有很多类需要使用某个接口的很多方法，有很多是相同的不需要改变，只有极少需要改变，一般使用这个</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><h1 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><p>用户请求上传文件，服务器处理这个请求，并且返回一个签名给到用户，用户通过这个签名来访问，文件存储系统，进行上传文件。文件存储系统的账号密码都是保存在自己服务器中的，比较的安全。</p><p><img src="https://s2.loli.net/2022/06/20/mDvuMC3e7iBynNj.png"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>minio使用指南</p><p>使用一个新的maven项目来存放所有的第三方包。</p><h2 id="加入到父项目项目中（聚合）"><a href="#加入到父项目项目中（聚合）" class="headerlink" title="加入到父项目项目中（聚合）"></a>加入到父项目项目中（聚合）</h2><h2 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h2><h3 id="还需要加入common，"><a href="#还需要加入common，" class="headerlink" title="还需要加入common，"></a>还需要加入common，</h3><h3 id="minio注意"><a href="#minio注意" class="headerlink" title="minio注意"></a>minio注意</h3><p>这里使用的是minio的依赖包，这里注意版本号的问题，需要排除okhttp版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.tongfei<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>progressbar<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注册到nacos中，并且配置配置中心等信息"><a href="#注册到nacos中，并且配置配置中心等信息" class="headerlink" title="注册到nacos中，并且配置配置中心等信息"></a>注册到nacos中，并且配置配置中心等信息</h2><p>加入到minio中的配置信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#minio配置</span></span><br><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">access-key:</span> <span class="string">admin</span>      <span class="comment">#key就是docker初始化是设置的，密钥相同</span></span><br><span class="line">  <span class="attr">secret-key:</span> <span class="string">admin123456</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://120.55.125.132:9000</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">gmall</span></span><br><span class="line">  <span class="attr">min:</span> <span class="number">10</span><span class="string">*1024</span>    <span class="comment">#10kb</span></span><br><span class="line">  <span class="attr">max:</span> <span class="number">10</span><span class="string">*1024*1024</span>   <span class="comment">#10MB</span></span><br></pre></td></tr></table></figure><h2 id="使用一个配置类获取配置"><a href="#使用一个配置类获取配置" class="headerlink" title="使用一个配置类获取配置"></a>使用一个配置类获取配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.access-key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secret-key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucket&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">minioClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()</span><br><span class="line">                .endpoint(url)</span><br><span class="line">                .credentials(accessKey, secretKey)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务逻辑方面"><a href="#业务逻辑方面" class="headerlink" title="业务逻辑方面"></a>业务逻辑方面</h2><h3 id="service服务"><a href="#service服务" class="headerlink" title="service服务"></a>service服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioClientPolicy</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioConfiguration minioConfiguration;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.min&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String min;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.max&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String max;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户获得上传签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time     过期时间,指定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">getPolicy</span><span class="params">(String fileName, ZonedDateTime time)</span> &#123;</span><br><span class="line"><span class="comment">//        给储存桶创建一个上传策略,过期时间是time</span></span><br><span class="line">        <span class="type">PostPolicy</span> <span class="variable">postPolicy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PostPolicy</span>(minioConfiguration.getBucketName(), time);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        设置一个参数key,值为上传对象的名称</span></span><br><span class="line">        postPolicy.addEqualsCondition(<span class="string">&quot;key&quot;</span>, fileName);</span><br><span class="line"><span class="comment">//        设置content-type,表示只能上传图片</span></span><br><span class="line">        postPolicy.addStartsWithCondition(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;image/&quot;</span>);</span><br><span class="line"><span class="comment">//        postPolicy.addContentLengthRangeCondition(Integer.valueOf(min), Integer.valueOf(max));</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            获得对象上传的策略,包括签名,文件信息,路径,</span></span><br><span class="line">            map = minioClient.getPresignedPostFormData(postPolicy);</span><br><span class="line">            map.put(<span class="string">&quot;host&quot;</span>, minioConfiguration.getUrl() + <span class="string">&quot;/&quot;</span> + minioConfiguration.getBucketName());</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;请求文件上传策略失败!错误原因:[&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取上传文件的url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPolicyUrl</span><span class="params">(String objectName, Method method, <span class="type">int</span> time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()</span><br><span class="line">                    .method(method)</span><br><span class="line">                    .bucket(minioConfiguration.getBucketName())</span><br><span class="line">                    .object(objectName)</span><br><span class="line">                    .expiry(time, timeUnit).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取上传url失败!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过文件名称获取url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">(String objectName, <span class="type">int</span> time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            url = minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()</span><br><span class="line">                    .method(Method.GET)</span><br><span class="line">                    .bucket(minioConfiguration.getBucketName())</span><br><span class="line">                    .object(objectName)</span><br><span class="line">                    .expiry(time, timeUnit).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;根据文件名称获取文件url失败!,失败原因:[&#123;&#125;]&quot;</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;third-party/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClientPolicy minioClientPolicy;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得上传的url地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/uploadUrl&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">uploadUrl</span><span class="params">(<span class="meta">@RequestParam(&quot;fileName&quot;)</span> String fileName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> minioClientPolicy.getPolicyUrl(fileName, Method.PUT, <span class="number">2</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;data&quot;</span>,url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个方法是获取上传策略，作用是获取令牌，</p><p>另一个是获取上传url路径，有了令牌就需要，用户通过浏览器自己上传文件而不是服务器进行上传。</p><p>最后返回的url地址，可以通过put请求进行上传文件。</p><h1 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h1><h2 id="后端业务"><a href="#后端业务" class="headerlink" title="后端业务"></a>后端业务</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h3><blockquote><p>需要使用put请求,官方要求,get请求是获得文件的访问地址,post请求会报错.</p></blockquote><h2 id="前端业务"><a href="#前端业务" class="headerlink" title="前端业务"></a>前端业务</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p>前端采取的是elementui 的el-upload组件,以及vue</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">      <span class="attr">action</span>=<span class="string">&quot;https://jsonplder.typiposts/&quot;</span>#这里随便填写,我们不使用这个默认的上传方式</span></span><br><span class="line"><span class="tag">      <span class="attr">list-type</span>=<span class="string">&quot;picture&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:multiple</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:show-file-list</span>=<span class="string">&quot;showFileList&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span>可以进行回显的文件列表</span></span><br><span class="line"><span class="tag">      <span class="attr">:http-request</span>=<span class="string">&quot;upload&quot;</span>#在这里就是定义使用自己的上传方法<span class="attr">.upload</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:before-upload</span>=<span class="string">&quot;beforeUpload&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:on-remove</span>=<span class="string">&quot;handleRemove&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:on-success</span>=<span class="string">&quot;handleUploadSuccess&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:on-preview</span>=<span class="string">&quot;handlePreview&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span>&gt;</span></span><br><span class="line">        只能上传jpg/png文件，且不超过10MB</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传之前的操作,在这前后端进行交互,获得minio的签名,后端会返回给前端,前端进行保存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; file </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_">beforeUpload</span>(<span class="params">file</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> _self = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(file);</span><br><span class="line">      <span class="keyword">let</span> ext = file.<span class="property">name</span>.<span class="title function_">substring</span>(file.<span class="property">name</span>.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(ext);</span><br><span class="line">      <span class="keyword">let</span> filename = <span class="title function_">getUUID</span>() + <span class="string">&quot;.&quot;</span> + ext;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">fileName</span> = filename;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">http</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: http.<span class="title function_">adornUrl</span>(<span class="string">&quot;/thirdparty/uploadUrl&quot;</span>),</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">          <span class="attr">params</span>: &#123; <span class="attr">fileName</span>: filename &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            _self.<span class="property">minioUrl</span> = response.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">minioUrl</span>);</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="literal">true</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="literal">false</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重写了文件上传,在这里上传文件,通过后端返回给我们的url地址.使用put进行上传.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; res </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; file </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="title function_">upload</span>(<span class="params">file</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> binFile = file.<span class="property">file</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">http</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>:<span class="variable language_">this</span>.<span class="property">minioUrl</span>,</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&quot;put&quot;</span>,</span><br><span class="line">          <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">file</span>:binFile</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件上传成功&quot;</span>);</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="literal">true</span>)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件上传失败&quot;</span>);</span><br><span class="line">          <span class="title function_">reject</span>(<span class="literal">false</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>三个步骤，</p><ol><li>获得令牌，上传文件</li><li>通过令牌获取上传的url。</li><li>用户通过返回的url进行上传文件</li></ol><h1 id="网关配置"><a href="#网关配置" class="headerlink" title="网关配置"></a>网关配置</h1><p>和前面差不多，基本上一致。</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="value获得不到数据"><a href="#value获得不到数据" class="headerlink" title="@value获得不到数据"></a>@value获得不到数据</h2><p>版本原因，需要降低版本，springcloud版本和主项目一致。</p><h2 id="jar包冲突"><a href="#jar包冲突" class="headerlink" title="jar包冲突"></a>jar包冲突</h2><p><img src="https://s2.loli.net/2022/06/20/A397lFm5uYedDKG.png"></p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a><strong>原因：</strong></h3><p>根据上面的异常信息分析，可能是okhttp依赖冲突造成的服务启动失败，因为minio底层要依赖okhttp进行和minio服务端进行通信，由于项目中多个依赖底层都依赖了不同版本的okhttp，导致这里的okhttp因版本不同，某些方法不可用，尝试降级minio的版本，如下：最好排除掉版本中原来的okhttp。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.tongfei<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>progressbar<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="前端上传不了数据一直报错"><a href="#前端上传不了数据一直报错" class="headerlink" title="前端上传不了数据一直报错"></a>前端上传不了数据一直报错</h2><h3 id="情况"><a href="#情况" class="headerlink" title="情况:"></a>情况:</h3><p>可以通过postman上传文件,但是就是不可以使用vue+element上传。</p><h3 id="解决：重写默认的upload方法解决，使用put请求"><a href="#解决：重写默认的upload方法解决，使用put请求" class="headerlink" title="解决：重写默认的upload方法解决，使用put请求"></a>解决：重写默认的upload方法解决，使用put请求</h3><p>一开始使用的是别人封装好的包进行请求地址。也就是把file二进制文件放到了params进行put请求，最后还是分析postman和前端上传的不同发现的。以后遇到这样的问题一定要进行比较发现问题（postman、vue）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">http</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>:<span class="variable language_">this</span>.<span class="property">minioUrl</span>,</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&quot;put&quot;</span>,</span><br><span class="line">          <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">file</span>:binFile有问题不能使用data进行传参，这样会出现文件格式不正确的情况，需要使用binary格式上传使用<span class="attr">date</span>: binFile</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件上传成功&quot;</span>);</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="literal">true</span>)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件上传失败&quot;</span>);</span><br><span class="line">          <span class="title function_">reject</span>(<span class="literal">false</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h2 id="文件无法预览"><a href="#文件无法预览" class="headerlink" title="文件无法预览"></a>文件无法预览</h2><p>结局上传问题之后，还没有完全完成，现在的问题就是上传没有问题但是就是没有办法下载预览，也就是文件提示格式是错误的。</p><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p>这个问题出现的原因是我使用的是data进行上传对象，这样写的是一个对象到文件中并不是一个二进制文件，这个文件包含了一些头信息之类的。</p><p>只需要把上传的文件改成一个二进制文件,之前是一个对象</p><p><strong>前后对比</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: binFile后</span><br><span class="line"><span class="attr">data</span>:&#123;<span class="attr">file</span>:binFile&#125;前</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解使用，空不返回</title>
      <link href="/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%EF%BC%8C%E7%A9%BA%E4%B8%8D%E8%BF%94%E5%9B%9E/"/>
      <url>/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%EF%BC%8C%E7%A9%BA%E4%B8%8D%E8%BF%94%E5%9B%9E/</url>
      
        <content type="html"><![CDATA[<p>使用@jsonInclude</p><p>使用的属性value，</p><p>可以是：non_empty,always</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网关解决跨域</title>
      <link href="/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E7%BD%91%E5%85%B3%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/"/>
      <url>/hexoBlog/2016/01/01/gmall%E6%96%87%E6%A1%A3/%E7%BD%91%E5%85%B3%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="最开始没有使用网关进行转发"><a href="#最开始没有使用网关进行转发" class="headerlink" title="最开始没有使用网关进行转发"></a>最开始没有使用网关进行转发</h1><p>最开始时候前端都是使用对应服务的绝对地址进行访问的。</p><h2 id="开始改造"><a href="#开始改造" class="headerlink" title="开始改造"></a>开始改造</h2><p>vue的baseurl改成网关地址，并且添加/api，这个/api为了网关好进行判断这个是请求，进行跨域访问。</p><p>一般baseurl在main.js中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">baseUrl=<span class="string">&quot;http://192.168.1.106:10616/api&quot;</span>;<span class="comment">//这个192.168.1.106:10616是网关地址</span></span><br><span class="line"><span class="comment">//后面具体的接口还会拼接一些接口</span></span><br></pre></td></tr></table></figure><p>这样前端请求的地址都变成了网关的地址，网关需要进行处理转发。既然你需要网关发送，那么服务一定要在nacos中注册。</p><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><p>1、如果服务没有注册，需要注册到nacos中（不需要使用namespace），并且添加配置中心（这里最好添加上namespace）。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gmall-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 服务注册地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">c991b9c0-b4d0-4057-b5fa-29450a81d75b</span></span><br></pre></td></tr></table></figure><p>2、配置完成不要忘了在启动类添加一个注解<code>@EnableDiscoveryClient</code>。</p><h2 id="配置网关路由"><a href="#配置网关路由" class="headerlink" title="配置网关路由"></a>配置网关路由</h2><ol><li>现在配置的只是服务的注册以及配置，需要网关发挥路由的作用还需要进行路由配置。</li><li>并且配置的访问地址是携带api的，在真实的请求中我们是不需要<code>api</code>这个字段的。</li></ol><p>针对上述问题，解决方法是在application.yml文件中配置如下：（配置路由需要注意的是）</p><blockquote><p>注意这个文件已经将配置了两个路径，精确的路由放到上面，gateway是自上往下执行匹配的。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#          精确的路由放上面</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gmall-product</span><span class="comment">#lb是进行负载均衡</span></span><br><span class="line">          <span class="attr">predicates:</span><span class="comment">#路由匹配规则只有符合要求的才可以使用这个规则</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/product/**</span></span><br><span class="line">          <span class="attr">filters:</span><span class="comment">#解决上述2问题，路由配置问题，需要对路由进行重写</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://renren-fast</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><h3 id="RewritePath-api-lt-segment-gt-segment"><a href="#RewritePath-api-lt-segment-gt-segment" class="headerlink" title="RewritePath=/api/(?&lt;segment&gt;.*),/$\{segment}"></a><code>RewritePath=/api/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</code></h3><p><code>(?&lt;segment&gt;.*)</code>：表示将后面<code>.*</code>匹配到的内容捕获到segment中，相当于替换</p><p><code>$\&#123;segment&#125;</code>：分组捕获进行替换</p><p>之所以使用<code>\</code>是因为避免yaml语法认为这是一个变量，<code>$&#123;name&#125;</code>这个就是一个变量.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>predicates</code> 进行==拦截==</p><p><code>filters</code> ： 进行==路径重写==等操作</p><p>常常会遇到跨站访问（跨域）的问题。</p><p>可以通过nginx来解决，还可以通过网关来解决。配置好路由规则就可以跳转相应的地址。</p><h1 id="跨域问题解决"><a href="#跨域问题解决" class="headerlink" title="跨域问题解决"></a>跨域问题解决</h1><p>正常的情况这个时候访问接口，应该是没有问题的。但是访问接口的时候发生了跨域问题。</p><p><strong>原因</strong>：cors头缺少‘access-control-allow-origin’</p><ol><li>解决方法一：通过nginx来解决</li><li>解决二，服务器请求允许跨域请求（添加headers，methods·····）</li></ol><h2 id="后端添加过滤器允许跨站访问"><a href="#后端添加过滤器允许跨站访问" class="headerlink" title="后端添加过滤器允许跨站访问"></a>后端添加过滤器允许跨站访问</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myCorsConfigration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用corswebfilter来做跨域,这个是一个接口,所以,找到一个具体的实现类(UrlBasedCorsConfigurationSource)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="comment">//创建跨域配置</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line"></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);    <span class="comment">//请求方式</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);        <span class="comment">//请求来源</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//        所有路径都需要跨域，这个注册需要配置，创建配置添加允许跨域请求头</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意这些cors包引入的都是reactive包下的，spring是响应式的。</p></blockquote><h1 id="问题注意"><a href="#问题注意" class="headerlink" title="问题注意"></a>问题注意</h1><h2 id="网关转发需要在一个命名空间下（public）"><a href="#网关转发需要在一个命名空间下（public）" class="headerlink" title="网关转发需要在一个命名空间下（public）"></a>网关转发需要在一个命名空间下（public）</h2><p>在服务注册的时候，不要分命名空间，命名空间只是在配置中心的时候在使用到的。</p><h2 id="出现了多个跨域请求"><a href="#出现了多个跨域请求" class="headerlink" title="出现了多个跨域请求"></a>出现了多个跨域请求</h2><p>也就是一个项目中配置了两次跨站允许请求头，解决去掉一处的配置。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springCloud认证中心搭建</title>
      <link href="/hexoBlog/2016/01/01/springCloud/springCloud%E8%AE%A4%E8%AF%81%E4%B8%AD%E5%BF%83%E6%90%AD%E5%BB%BA/"/>
      <url>/hexoBlog/2016/01/01/springCloud/springCloud%E8%AE%A4%E8%AF%81%E4%B8%AD%E5%BF%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<hr><p>title: springCloud认证中心搭建<br>comments: true<br>copyright: true<br>copyright_author: wuy<br>copyright_author_href: ‘<a href="https://xxxxxx.com&/#39;">https://xxxxxx.com&#39;</a><br>copyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者<br>date: 2022-06-27 21:12:59<br>tags: </p><ul><li>springCloud<br>categories: </li><li>springCloud<br>keywords:<br>description:<br>top_img:<br>cover: <a href="https://spring.io/images/spring-logo-9146a4d3298760c2e7e49595184e1975.svg">https://spring.io/images/spring-logo-9146a4d3298760c2e7e49595184e1975.svg</a><br>toc:<br>toc_number:<br>toc_style_simple:<br>katex:<br>aplayer:<br>highlight_shrink:</li></ul><hr><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="认证中心"><a href="#认证中心" class="headerlink" title="认证中心"></a>认证中心</h1>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0开始搭建自己的网站-一</title>
      <link href="/hexoBlog/2016/01/01/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99-%E4%B8%80/"/>
      <url>/hexoBlog/2016/01/01/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BD%91%E7%AB%99-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 从0开始搭建自己的网站(一)<br>comments: true<br>copyright: true<br>copyright_author: wuy<br>copyright_author_href: ‘<a href="https://xxxxxx.com&/#39;">https://xxxxxx.com&#39;</a><br>copyright_info: 此文章版权归wuy所有，如有转载，请註明来自原作者<br>date: 2022-06-25 21:01:31<br>tags: </p><ul><li>html</li><li>前端</li><li>css<br>categories: 搭建个人网站<br>keywords:<br>description:<br>top_img:<br>cover:<br>toc:<br>toc_number:<br>toc_style_simple:<br>katex:<br>aplayer:<br>highlight_shrink:</li></ul><hr><h1 id="网站的初始化"><a href="#网站的初始化" class="headerlink" title="网站的初始化"></a>网站的初始化</h1><p>创建一个html文件,css文件,js文件</p><h1 id="网站header部分-导航栏部分"><a href="#网站header部分-导航栏部分" class="headerlink" title="网站header部分(导航栏部分)"></a>网站header部分(导航栏部分)</h1>]]></content>
      
      
      <categories>
          
          <category> LeetCode破局攻略 </category>
          
          <category> 搭建个人网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
