<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>无异常无法插入数据库</title>
      <link href="/hexoBlog/2024/01/27/Mybatis/%E6%97%A0%E5%BC%82%E5%B8%B8%E6%97%A0%E6%B3%95%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/hexoBlog/2024/01/27/Mybatis/%E6%97%A0%E5%BC%82%E5%B8%B8%E6%97%A0%E6%B3%95%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>开发中使用Mybatis框架的时候遇到程序没有爆错，但是数据库没有办法插入数据的情况。仔细调试发现数据库中的id为null，所以猜测可能与id有关，去实体类中设置默认的id类型，自动填充。</p><h2 id="实体类ID-自动填充"><a href="#实体类ID-自动填充" class="headerlink" title="实体类ID 自动填充"></a>实体类ID 自动填充</h2><p><img src="/hexoBlog/assets/image-20240127232400531.png" alt="image-20240127232400531"></p><p>设置type属性，其中type参数有如下：</p><p><img src="/hexoBlog/assets/image-20240127232434937.png" alt="image-20240127232434937"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AUTO(0), 默认自动增加</span><br><span class="line">NONE(1),空</span><br><span class="line">INPUT(2),手动传入id，不会自动生成</span><br><span class="line">ASSIGN_ID(3),使用雪花算法生成id</span><br><span class="line">ASSIGN_UUID(4);使用uuid生成id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IOC DI</title>
      <link href="/hexoBlog/2024/01/27/ssm/IOC%20%20DI/"/>
      <url>/hexoBlog/2024/01/27/ssm/IOC%20%20DI/</url>
      
        <content type="html"><![CDATA[<p><img src="/hexoBlog/assets/image-20240120212907961.png" alt="image-20240120212907961"></p><h2 id="ioc"><a href="#ioc" class="headerlink" title="ioc"></a>ioc</h2><p>​    从上图中可以看出，本来需要通过 new 生成对象 bookDao ，但是使用呢 ioc 之后就不需要了，统一由 ioc 容器管理所有的bean。这样的好处就是解耦，本来可能更改new 的对象，就得重新启动项目，但是有了这个就不需要通过代码展现出来，spring 的 ioc 自动帮我们处理了。</p><p>使用一些注解可以直接声明这个是一个 bean ，比如说： <code>@Controller</code> <code>@Component</code></p><h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><p>​    在 ioc 容器中已经处理好了 bean 之间的依赖关系，只需要声明了bean，那么就默认的从 ioc 中获取到对应的依赖关系，这个就是DI。</p><p>使用注解 <code>@Autowired</code> 或 <code>@Resource</code>来实现引入 bean 对象</p><h3 id="Autowired-或-Resource区别"><a href="#Autowired-或-Resource区别" class="headerlink" title="@Autowired 或 @Resource区别"></a><code>@Autowired</code> 或 <code>@Resource</code>区别</h3><p>@Autowired ：按类型装配，如果有两个相同的类型的 Mapper（继承同一个类型），那么会爆错，不知道加载哪一个。</p><p>@Resource：按名称装配，名称唯一，所以不会出错，使用时根据 @Mapper（name），name定义名称。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> ssm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>整合junit</title>
      <link href="/hexoBlog/2024/01/27/ssm/%E6%95%B4%E5%90%88junit/"/>
      <url>/hexoBlog/2024/01/27/ssm/%E6%95%B4%E5%90%88junit/</url>
      
        <content type="html"><![CDATA[<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><h2 id="引入xml"><a href="#引入xml" class="headerlink" title="引入xml"></a>引入xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h2><p>ide 添加测试文件快捷键 command + shift + T</p><p>@SpringBootTest 声明测试</p><p><img src="/hexoBlog/assets/image-20240121125233149.png" alt="image-20240121125233149"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> ssm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>加载配置文件</title>
      <link href="/hexoBlog/2024/01/27/ssm/%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/hexoBlog/2024/01/27/ssm/%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="/hexoBlog/assets/image-20240120224129500.png" alt="image-20240120224129500"></p><p><img src="/hexoBlog/../asset/image-20240128110536338.png" alt="image-20240128110536338"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> ssm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用的git命令</title>
      <link href="/hexoBlog/2023/04/22/git/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
      <url>/hexoBlog/2023/04/22/git/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="强制上传文件"><a href="#强制上传文件" class="headerlink" title="强制上传文件"></a>强制上传文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># origin 仓库地址</span></span><br><span class="line"><span class="comment"># 后面是分支名称</span></span><br><span class="line">git push -u origin feature/20220630_commodity -f</span><br></pre></td></tr></table></figure><h1 id="拉取指定分支的文件"><a href="#拉取指定分支的文件" class="headerlink" title="拉取指定分支的文件"></a>拉取指定分支的文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin feature/20220630_commodity</span><br></pre></td></tr></table></figure><h1 id="查看本地仓库的文件"><a href="#查看本地仓库的文件" class="headerlink" title="查看本地仓库的文件"></a>查看本地仓库的文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files |grep &lt;文件名称&gt;</span><br></pre></td></tr></table></figure><h1 id="查看所有的分支"><a href="#查看所有的分支" class="headerlink" title="查看所有的分支"></a>查看所有的分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line">==============</span><br><span class="line">  a</span><br><span class="line">  feature/20220630_commodity</span><br><span class="line">  master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/dev</span><br><span class="line">  remotes/origin/feature/20220630_commodity</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure><p>远程仓库都是含有 remotes。</p><h1 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout remotes/origin/feature/20220630_commodity</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的git命令</title>
      <link href="/hexoBlog/2023/04/22/git/git%E4%B8%8E%E4%BB%A3%E7%90%86%E9%97%AE%E9%A2%98/"/>
      <url>/hexoBlog/2023/04/22/git/git%E4%B8%8E%E4%BB%A3%E7%90%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="git与代理问题"><a href="#git与代理问题" class="headerlink" title="git与代理问题"></a>git与代理问题</h1><p>使用代理的时候经常会遇到这样的情况，无法使用命令<code>git push</code>上传到远程代码仓库</p><blockquote><p>原因：git默认不走代理接口</p></blockquote><h2 id="解决：设置代理服务器"><a href="#解决：设置代理服务器" class="headerlink" title="解决：设置代理服务器:"></a>解决：设置代理服务器:</h2><p>第一种方法：在.gitconfig加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.proxy=127.0.0.1:7890</span><br><span class="line">http.sslVerify=false</span><br></pre></td></tr></table></figure><p>第二种方法：直接在命令行敲</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global http.sslVerify false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器运行 selenium</title>
      <link href="/hexoBlog/2023/04/22/%E5%B7%A5%E7%A8%8B/%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85selenium/"/>
      <url>/hexoBlog/2023/04/22/%E5%B7%A5%E7%A8%8B/%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85selenium/</url>
      
        <content type="html"><![CDATA[<h1 id="服务器运行-selenium"><a href="#服务器运行-selenium" class="headerlink" title="服务器运行 selenium"></a>服务器运行 selenium</h1><h2 id="下载-chromeDrive"><a href="#下载-chromeDrive" class="headerlink" title="下载 chromeDrive"></a>下载 chromeDrive</h2><p>从<a href="https://sites.google.com/chromium.org/driver/downloads">这里</a>下载对应你的 chrome 版本的 chromeDrive。</p><h2 id="下载-chrome"><a href="#下载-chrome" class="headerlink" title="下载 chrome"></a>下载 chrome</h2><h3 id="首先需要安装-chrome-依赖"><a href="#首先需要安装-chrome-依赖" class="headerlink" title="首先需要安装 chrome 依赖"></a>首先需要安装 chrome 依赖</h3><p>在 CentOS 中，使用 yum 包管理器来安装这些依赖项。</p><ol><li><p>打开终端，以 root 用户身份登录。</p></li><li><p>更新 yum 包缓存：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><ol start="3"><li>安装依赖项：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y libX11 GConf2 fontconfig libXfont Xvfb</span><br></pre></td></tr></table></figure><ol start="4"><li>安装 chrome 浏览器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum localinstall google-chrome-stable_current_x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="开启虚拟显示器"><a href="#开启虚拟显示器" class="headerlink" title="开启虚拟显示器"></a>开启虚拟显示器</h2><p>CentOS 默认没有安装图形用户界面（GUI），所以在服务器上运行 Chrome 时需要启动一个虚拟显示器。您可以使用 Xvfb（虚拟帧缓存）来实现这个目的。</p><p>以下是一些可能的解决方案：</p><ol><li>安装 Xvfb</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y xorg-x11-server-Xvfb</span><br></pre></td></tr></table></figure><ol start="2"><li>启动 Xvfb</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Xvfb :99 -screen 0 1280x1024x24 &amp;</span><br></pre></td></tr></table></figure><p>这会在后台启动一个虚拟显示器，您可以在 Python 代码中设置 DISPLAY 环境变量来使用它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">&#x27;--headless&#x27;</span>)  <span class="comment"># 开启无界面模式</span></span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)  <span class="comment"># 禁用显卡</span></span><br><span class="line">option.add_argument(<span class="string">&quot;--user-agent=Mozilla/5.0 HAHA&quot;</span>)  <span class="comment"># 替换UA</span></span><br><span class="line">option.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-dev-shm-usage&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-infobars&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--remote-debugging-port=9222&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--start-maximized&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-extensions&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-popup-blocking&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-default-apps&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-web-security&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-logging&#x27;</span>)</span><br><span class="line">option.add_argument(</span><br><span class="line">    <span class="string">&#x27;--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--lang=zh-CN,zh&#x27;</span>)</span><br><span class="line">option.add_argument(</span><br><span class="line">    <span class="string">&#x27;--disable-blink-features=AutomationControlled&#x27;</span>)</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;DISPLAY&#x27;</span>] = <span class="string">&#x27;:99&#x27;</span></span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br></pre></td></tr></table></figure><h2 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h2><p>​ 图书馆代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">&#x27;--headless&#x27;</span>)  <span class="comment"># 开启无界面模式</span></span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)  <span class="comment"># 禁用显卡</span></span><br><span class="line">option.add_argument(<span class="string">&quot;--user-agent=Mozilla/5.0 HAHA&quot;</span>)  <span class="comment"># 替换UA</span></span><br><span class="line">option.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-dev-shm-usage&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-infobars&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--remote-debugging-port=9222&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--start-maximized&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-extensions&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-popup-blocking&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-default-apps&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-web-security&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-logging&#x27;</span>)</span><br><span class="line">option.add_argument(</span><br><span class="line">    <span class="string">&#x27;--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--lang=zh-CN,zh&#x27;</span>)</span><br><span class="line">option.add_argument(</span><br><span class="line">    <span class="string">&#x27;--disable-blink-features=AutomationControlled&#x27;</span>)</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;DISPLAY&#x27;</span>] = <span class="string">&#x27;:99&#x27;</span></span><br><span class="line"><span class="comment"># proxy_str = &#x27;127.0.0.1:7890&#x27;</span></span><br><span class="line"><span class="comment"># option.add_argument(&#x27;--proxy-server=https://&#123;&#125;&#x27;.format(proxy_str))  # 使用代理ip</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    account = &#123;&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;account.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        account = json.load(f)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> account == &#123;&#125;:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;2020283307&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;WY010617!&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;ic-cookie&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> account</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">account = init()</span><br><span class="line"><span class="comment"># ser = Service(&quot;/home/library/chromedriver&quot;)</span></span><br><span class="line">driver = webdriver.Chrome(<span class="string">&quot;/home/library/chromedriver&quot;</span>, options=option)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&#x27;http://icspace.lib.zjhu.edu.cn/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">wait = WebDriverWait(driver, <span class="number">20</span>)</span><br><span class="line">element = wait.until(EC.presence_of_element_located((By.NAME, <span class="string">&#x27;username&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">username = driver.find_element(By.NAME, <span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">username.send_keys(account[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">ppassword = driver.find_element(By.ID, <span class="string">&#x27;ppassword&#x27;</span>)</span><br><span class="line">driver.execute_script(</span><br><span class="line">    <span class="string">&quot;arguments[0].value=arguments[1];&quot;</span>, ppassword, account[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line"></span><br><span class="line">submit = driver.find_element(By.ID, <span class="string">&#x27;dl&#x27;</span>)</span><br><span class="line">submit.click()</span><br><span class="line"></span><br><span class="line">cookies = driver.get_cookies()</span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</span><br><span class="line">    <span class="keyword">if</span> cookie[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;ic-cookie&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(cookie[<span class="string">&quot;value&quot;</span>])</span><br><span class="line">        account[<span class="string">&#x27;ic-cookie&#x27;</span>] = cookie[<span class="string">&quot;value&quot;</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;account.json&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(account, f, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git多账号管理</title>
      <link href="/hexoBlog/2023/01/01/git/git%E5%A4%9A%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
      <url>/hexoBlog/2023/01/01/git/git%E5%A4%9A%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="git多账号管理"><a href="#git多账号管理" class="headerlink" title="git多账号管理"></a>git多账号管理</h1><h2 id="清空默认账号"><a href="#清空默认账号" class="headerlink" title="清空默认账号"></a>清空默认账号</h2><p>首先在管理账号的时候确保电脑的 git 未配置全局 git 账号。若配置了全局账号则按照如下操作进行清空默认的账号:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure><h2 id="生成-ssh-key"><a href="#生成-ssh-key" class="headerlink" title="生成 ssh-key"></a>生成 ssh-key</h2><p>现在需要在自己使用的电脑上生成一个 ssh-key </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t id_ras_github -C <span class="string">&quot;xxx@xx.com&quot;</span></span><br></pre></td></tr></table></figure><p>会在 <code>~/.ssh</code> 目录下生成两个文件，一个是<code>XX.pub</code>存放公钥的文件，另一个是私钥的文件。</p><h2 id="将-ssh-key-分别添加到-ssh-agent-信任列表"><a href="#将-ssh-key-分别添加到-ssh-agent-信任列表" class="headerlink" title="将 ssh-key 分别添加到 ssh-agent 信任列表"></a>将 <code>ssh-key</code> 分别添加到 <code>ssh-agent</code> 信任列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_ras_github</span><br></pre></td></tr></table></figure><h2 id="config-文件中配置多个-ssh-key"><a href="#config-文件中配置多个-ssh-key" class="headerlink" title="config 文件中配置多个 ssh-key"></a>config 文件中配置多个 ssh-key</h2>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现验证码识别接口</title>
      <link href="/hexoBlog/2022/08/25/captcha/"/>
      <url>/hexoBlog/2022/08/25/captcha/</url>
      
        <content type="html"><![CDATA[<h1 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h1><h1 id="GET-http-120-55-75-103-3000"><a href="#GET-http-120-55-75-103-3000" class="headerlink" title="GET  http://120.55.75.103:3000"></a>GET  <a href="http://120.55.75.103:3000/">http://120.55.75.103:3000</a></h1><p>Body  (json)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;img&quot;: &quot;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&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="response"><a href="#response" class="headerlink" title="response"></a>response</h1><p><code>369y</code></p><p>使用到了flask后端框架实现+ddddocr验证码识别库来实现接口.</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> work </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
